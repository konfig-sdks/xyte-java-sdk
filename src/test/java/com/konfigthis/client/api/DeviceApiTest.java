/*
 * Testing API
 * Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DeviceAppendDumpFileRequest;
import com.konfigthis.client.model.DeviceAppendDumpFileResponse;
import com.konfigthis.client.model.DeviceCloseIncidentResponse;
import com.konfigthis.client.model.DeviceCreateRegistrationRequest;
import com.konfigthis.client.model.DeviceCreateRegistrationResponse;
import com.konfigthis.client.model.DeviceDeleteDeviceResponse;
import com.konfigthis.client.model.DeviceGetChildDevicesResponseInner;
import com.konfigthis.client.model.DeviceGetConfig200Response;
import com.konfigthis.client.model.DeviceGetConfigResponse;
import com.konfigthis.client.model.DeviceGetIncidentsResponse;
import com.konfigthis.client.model.DeviceGetInfo200Response;
import com.konfigthis.client.model.DeviceGetInfoResponse;
import com.konfigthis.client.model.DeviceGetSpaceInfoResponse;
import com.konfigthis.client.model.DeviceGetTelemetriesResponseInner;
import com.konfigthis.client.model.DeviceListCommandsResponse;
import com.konfigthis.client.model.DeviceListDevicesResponse;
import com.konfigthis.client.model.DeviceOpenIncidentRequest;
import com.konfigthis.client.model.DeviceOpenIncidentResponse;
import com.konfigthis.client.model.DeviceRegisterChildDeviceRequest;
import com.konfigthis.client.model.DeviceRegisterChildDeviceResponse;
import com.konfigthis.client.model.DeviceSendChildTelemetriesRequest;
import com.konfigthis.client.model.DeviceSendChildTelemetriesResponse;
import com.konfigthis.client.model.DeviceSendCommandRequest;
import com.konfigthis.client.model.DeviceSendCommandResponse;
import com.konfigthis.client.model.DeviceSendDumpFileRequest;
import com.konfigthis.client.model.DeviceSendDumpFileResponse;
import com.konfigthis.client.model.DeviceSendTelemetryRequest;
import com.konfigthis.client.model.DeviceSendTelemetryResponse;
import com.konfigthis.client.model.DeviceSetConfigRequest;
import com.konfigthis.client.model.DeviceSetConfigResponse;
import com.konfigthis.client.model.DeviceUpdateCloudSettingsRequest;
import com.konfigthis.client.model.DeviceUpdateDeviceRequest;
import com.konfigthis.client.model.DeviceUpdateDeviceResponse;
import com.konfigthis.client.model.DeviceUpdateLicenseRequest;
import com.konfigthis.client.model.DeviceUpdateLicenseResponse;
import java.io.File;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeviceApi
 */
@Disabled
public class DeviceApiTest {

    private static DeviceApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DeviceApi(apiClient);
    }

    /**
     * Append Dump File
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendDumpFileTest() throws ApiException {
        String RAW_BODY = null;
        String deviceId = null;
        String dumpId = null;
        DeviceAppendDumpFileResponse response = api.appendDumpFile(RAW_BODY, deviceId, dumpId)
                .execute();
        // TODO: test validations
    }

    /**
     * Close Incident
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeIncidentTest() throws ApiException {
        String deviceId = null;
        String incidentId = null;
        DeviceCloseIncidentResponse response = api.closeIncident(deviceId, incidentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Register Device
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRegistrationTest() throws ApiException {
        String sn = null;
        String firmwareVersion = null;
        String hardwareKey = null;
        String mac = null;
        String cloudId = null;
        String name = null;
        Object details = null;
        String subModel = null;
        String parentId = null;
        DeviceCreateRegistrationResponse response = api.createRegistration(sn, firmwareVersion, hardwareKey)
                .mac(mac)
                .cloudId(cloudId)
                .name(name)
                .details(details)
                .subModel(subModel)
                .parentId(parentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Device
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        String deviceId = null;
        DeviceDeleteDeviceResponse response = api.deleteDevice(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get All Device&#39;s State History
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllDeviceStateHistoriesTest() throws ApiException {
        String status = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Integer page = null;
        String response = api.getAllDeviceStateHistories()
                .status(status)
                .from(from)
                .to(to)
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Child Devices
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChildDevicesTest() throws ApiException {
        String parentId = null;
        List<DeviceGetChildDevicesResponseInner> response = api.getChildDevices(parentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Command
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommandTest() throws ApiException {
        String deviceId = null;
        Object response = api.getCommand(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Config
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigTest() throws ApiException {
        String deviceId = null;
        DeviceGetConfigResponse response = api.getConfig(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Device Configuration
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfig_0Test() throws ApiException {
        String deviceId = null;
        DeviceGetConfig200Response response = api.getConfig_0(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get File
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileTest() throws ApiException {
        String deviceId = null;
        String fileUuid = null;
        String response = api.getFile(deviceId, fileUuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Files
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesTest() throws ApiException {
        String deviceId = null;
        String response = api.getFiles(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Incidents
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIncidentsTest() throws ApiException {
        String deviceId = null;
        DeviceGetIncidentsResponse response = api.getIncidents(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Device Info
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        String deviceId = null;
        DeviceGetInfoResponse response = api.getInfo(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Device Info
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfo_0Test() throws ApiException {
        String deviceId = null;
        DeviceGetInfo200Response response = api.getInfo_0(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get License
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLicenseTest() throws ApiException {
        String deviceId = null;
        Object response = api.getLicense(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Licenses
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLicensesTest() throws ApiException {
        String deviceId = null;
        Object response = api.getLicenses(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Space Info
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpaceInfoTest() throws ApiException {
        String deviceId = null;
        DeviceGetSpaceInfoResponse response = api.getSpaceInfo(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Device State History
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStateHistoryTest() throws ApiException {
        String deviceId = null;
        String status = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Integer page = null;
        String response = api.getStateHistory(deviceId)
                .status(status)
                .from(from)
                .to(to)
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Device Telemetries
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTelemetriesTest() throws ApiException {
        String deviceId = null;
        List<DeviceGetTelemetriesResponseInner> response = api.getTelemetries(deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Device Commands
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCommandsTest() throws ApiException {
        String deviceId = null;
        String status = null;
        DeviceListCommandsResponse response = api.listCommands(deviceId)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * List Devices
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesTest() throws ApiException {
        String modelId = null;
        String sn = null;
        String mac = null;
        String page = null;
        DeviceListDevicesResponse response = api.listDevices()
                .modelId(modelId)
                .sn(sn)
                .mac(mac)
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Open Incident
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openIncidentTest() throws ApiException {
        String title = null;
        String deviceId = null;
        String description = null;
        String priority = null;
        String issue = null;
        String RAW_BODY = null;
        DeviceOpenIncidentResponse response = api.openIncident(title, deviceId)
                .description(description)
                .priority(priority)
                .issue(issue)
                .RAW_BODY(RAW_BODY)
                .execute();
        // TODO: test validations
    }

    /**
     * Register Child Device
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerChildDeviceTest() throws ApiException {
        String firmwareVersion = null;
        String modelId = null;
        String parentId = null;
        String subModel = null;
        String sn = null;
        String mac = null;
        String name = null;
        Object details = null;
        DeviceRegisterChildDeviceResponse response = api.registerChildDevice(firmwareVersion, modelId, parentId)
                .subModel(subModel)
                .sn(sn)
                .mac(mac)
                .name(name)
                .details(details)
                .execute();
        // TODO: test validations
    }

    /**
     * Send Child Telemetries
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendChildTelemetriesTest() throws ApiException {
        Object RAW_BODY = null;
        String deviceId = null;
        DeviceSendChildTelemetriesResponse response = api.sendChildTelemetries(RAW_BODY, deviceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Command
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendCommandTest() throws ApiException {
        String status = null;
        String id = null;
        String deviceId = null;
        String message = null;
        DeviceSendCommandResponse response = api.sendCommand(status, id, deviceId)
                .message(message)
                .execute();
        // TODO: test validations
    }

    /**
     * Send Dump
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendDumpFileTest() throws ApiException {
        File RAW_BODY = null;
        String deviceId = null;
        String mimeType = null;
        String filename = null;
        DeviceSendDumpFileResponse response = api.sendDumpFile(RAW_BODY, deviceId, mimeType, filename)
                .execute();
        // TODO: test validations
    }

    /**
     * Send Telemetry
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTelemetryTest() throws ApiException {
        String status = null;
        String deviceId = null;
        LocalDate timestamp = null;
        String telemetries = null;
        Boolean override = null;
        DeviceSendTelemetryResponse response = api.sendTelemetry(status, deviceId)
                .timestamp(timestamp)
                .telemetries(telemetries)
                .override(override)
                .execute();
        // TODO: test validations
    }

    /**
     * Set Config
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setConfigTest() throws ApiException {
        String deviceId = null;
        String RAW_BODY = null;
        DeviceSetConfigResponse response = api.setConfig(deviceId)
                .RAW_BODY(RAW_BODY)
                .execute();
        // TODO: test validations
    }

    /**
     * Set Cloud Settings
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCloudSettingsTest() throws ApiException {
        String deviceId = null;
        String property = null;
        String value = null;
        String response = api.updateCloudSettings(deviceId)
                .property(property)
                .value(value)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Device
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        String deviceId = null;
        String firmwareVersion = null;
        String name = null;
        String spaceVersion = null;
        String configVersion = null;
        Object details = null;
        DeviceUpdateDeviceResponse response = api.updateDevice(deviceId)
                .firmwareVersion(firmwareVersion)
                .name(name)
                .spaceVersion(spaceVersion)
                .configVersion(configVersion)
                .details(details)
                .execute();
        // TODO: test validations
    }

    /**
     * Update License
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLicenseTest() throws ApiException {
        String id = null;
        String state = null;
        String deviceId = null;
        String error = null;
        DeviceUpdateLicenseResponse response = api.updateLicense(id, state, deviceId)
                .error(error)
                .execute();
        // TODO: test validations
    }

}
