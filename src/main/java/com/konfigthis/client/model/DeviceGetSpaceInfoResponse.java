/*
 * Testing API
 * Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DeviceGetSpaceInfoResponseLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DeviceGetSpaceInfoResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DeviceGetSpaceInfoResponse {
  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private DeviceGetSpaceInfoResponseLocation location;

  public static final String SERIALIZED_NAME_TEMPERATURE_UNITS = "temperature_units";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE_UNITS)
  private String temperatureUnits;

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private Boolean maintenance = true;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LOCAL_TIME = "local_time";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME)
  private String localTime;

  public DeviceGetSpaceInfoResponse() {
  }

  public DeviceGetSpaceInfoResponse location(DeviceGetSpaceInfoResponseLocation location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceGetSpaceInfoResponseLocation getLocation() {
    return location;
  }


  public void setLocation(DeviceGetSpaceInfoResponseLocation location) {
    
    
    
    this.location = location;
  }


  public DeviceGetSpaceInfoResponse temperatureUnits(String temperatureUnits) {
    
    
    
    
    this.temperatureUnits = temperatureUnits;
    return this;
  }

   /**
   * Get temperatureUnits
   * @return temperatureUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "celsius", value = "")

  public String getTemperatureUnits() {
    return temperatureUnits;
  }


  public void setTemperatureUnits(String temperatureUnits) {
    
    
    
    this.temperatureUnits = temperatureUnits;
  }


  public DeviceGetSpaceInfoResponse maintenance(Boolean maintenance) {
    
    
    
    
    this.maintenance = maintenance;
    return this;
  }

   /**
   * Get maintenance
   * @return maintenance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getMaintenance() {
    return maintenance;
  }


  public void setMaintenance(Boolean maintenance) {
    
    
    
    this.maintenance = maintenance;
  }


  public DeviceGetSpaceInfoResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Interactive Class", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public DeviceGetSpaceInfoResponse localTime(String localTime) {
    
    
    
    
    this.localTime = localTime;
    return this;
  }

   /**
   * Get localTime
   * @return localTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-03-17T10:55:28+01:00", value = "")

  public String getLocalTime() {
    return localTime;
  }


  public void setLocalTime(String localTime) {
    
    
    
    this.localTime = localTime;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DeviceGetSpaceInfoResponse instance itself
   */
  public DeviceGetSpaceInfoResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceGetSpaceInfoResponse deviceGetSpaceInfoResponse = (DeviceGetSpaceInfoResponse) o;
    return Objects.equals(this.location, deviceGetSpaceInfoResponse.location) &&
        Objects.equals(this.temperatureUnits, deviceGetSpaceInfoResponse.temperatureUnits) &&
        Objects.equals(this.maintenance, deviceGetSpaceInfoResponse.maintenance) &&
        Objects.equals(this.name, deviceGetSpaceInfoResponse.name) &&
        Objects.equals(this.localTime, deviceGetSpaceInfoResponse.localTime)&&
        Objects.equals(this.additionalProperties, deviceGetSpaceInfoResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(location, temperatureUnits, maintenance, name, localTime, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceGetSpaceInfoResponse {\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    temperatureUnits: ").append(toIndentedString(temperatureUnits)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    localTime: ").append(toIndentedString(localTime)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location");
    openapiFields.add("temperature_units");
    openapiFields.add("maintenance");
    openapiFields.add("name");
    openapiFields.add("local_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeviceGetSpaceInfoResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeviceGetSpaceInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceGetSpaceInfoResponse is not found in the empty JSON string", DeviceGetSpaceInfoResponse.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        DeviceGetSpaceInfoResponseLocation.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      if ((jsonObj.get("temperature_units") != null && !jsonObj.get("temperature_units").isJsonNull()) && !jsonObj.get("temperature_units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temperature_units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temperature_units").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("local_time") != null && !jsonObj.get("local_time").isJsonNull()) && !jsonObj.get("local_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceGetSpaceInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceGetSpaceInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceGetSpaceInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceGetSpaceInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceGetSpaceInfoResponse>() {
           @Override
           public void write(JsonWriter out, DeviceGetSpaceInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceGetSpaceInfoResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DeviceGetSpaceInfoResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeviceGetSpaceInfoResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeviceGetSpaceInfoResponse
  * @throws IOException if the JSON string is invalid with respect to DeviceGetSpaceInfoResponse
  */
  public static DeviceGetSpaceInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceGetSpaceInfoResponse.class);
  }

 /**
  * Convert an instance of DeviceGetSpaceInfoResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

