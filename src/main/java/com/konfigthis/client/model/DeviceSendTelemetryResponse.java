/*
 * Testing API
 * Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DeviceSendTelemetryResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DeviceSendTelemetryResponse {
  public static final String SERIALIZED_NAME_CONFIG_VERSION = "config_version";
  @SerializedName(SERIALIZED_NAME_CONFIG_VERSION)
  private Integer configVersion = 0;

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private Boolean command = true;

  public static final String SERIALIZED_NAME_INFO_VERSION = "info_version";
  @SerializedName(SERIALIZED_NAME_INFO_VERSION)
  private Integer infoVersion = 0;

  public static final String SERIALIZED_NAME_NEW_LICENSES = "new_licenses";
  @SerializedName(SERIALIZED_NAME_NEW_LICENSES)
  private Boolean newLicenses = true;

  public static final String SERIALIZED_NAME_LATEST_FW_VERSION = "latest_fw_version";
  @SerializedName(SERIALIZED_NAME_LATEST_FW_VERSION)
  private String latestFwVersion;

  public static final String SERIALIZED_NAME_LATEST_FW_FILE_ID = "latest_fw_file_id";
  @SerializedName(SERIALIZED_NAME_LATEST_FW_FILE_ID)
  private String latestFwFileId;

  public static final String SERIALIZED_NAME_SPACE_DATA_VERSION = "space_data_version";
  @SerializedName(SERIALIZED_NAME_SPACE_DATA_VERSION)
  private Integer spaceDataVersion = 0;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success = true;

  public DeviceSendTelemetryResponse() {
  }

  public DeviceSendTelemetryResponse configVersion(Integer configVersion) {
    
    
    
    
    this.configVersion = configVersion;
    return this;
  }

   /**
   * Get configVersion
   * @return configVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Integer getConfigVersion() {
    return configVersion;
  }


  public void setConfigVersion(Integer configVersion) {
    
    
    
    this.configVersion = configVersion;
  }


  public DeviceSendTelemetryResponse command(Boolean command) {
    
    
    
    
    this.command = command;
    return this;
  }

   /**
   * Get command
   * @return command
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getCommand() {
    return command;
  }


  public void setCommand(Boolean command) {
    
    
    
    this.command = command;
  }


  public DeviceSendTelemetryResponse infoVersion(Integer infoVersion) {
    
    
    
    
    this.infoVersion = infoVersion;
    return this;
  }

   /**
   * Get infoVersion
   * @return infoVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Integer getInfoVersion() {
    return infoVersion;
  }


  public void setInfoVersion(Integer infoVersion) {
    
    
    
    this.infoVersion = infoVersion;
  }


  public DeviceSendTelemetryResponse newLicenses(Boolean newLicenses) {
    
    
    
    
    this.newLicenses = newLicenses;
    return this;
  }

   /**
   * Get newLicenses
   * @return newLicenses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getNewLicenses() {
    return newLicenses;
  }


  public void setNewLicenses(Boolean newLicenses) {
    
    
    
    this.newLicenses = newLicenses;
  }


  public DeviceSendTelemetryResponse latestFwVersion(String latestFwVersion) {
    
    
    
    
    this.latestFwVersion = latestFwVersion;
    return this;
  }

   /**
   * Get latestFwVersion
   * @return latestFwVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.3.4", value = "")

  public String getLatestFwVersion() {
    return latestFwVersion;
  }


  public void setLatestFwVersion(String latestFwVersion) {
    
    
    
    this.latestFwVersion = latestFwVersion;
  }


  public DeviceSendTelemetryResponse latestFwFileId(String latestFwFileId) {
    
    
    
    
    this.latestFwFileId = latestFwFileId;
    return this;
  }

   /**
   * Get latestFwFileId
   * @return latestFwFileId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", value = "")

  public String getLatestFwFileId() {
    return latestFwFileId;
  }


  public void setLatestFwFileId(String latestFwFileId) {
    
    
    
    this.latestFwFileId = latestFwFileId;
  }


  public DeviceSendTelemetryResponse spaceDataVersion(Integer spaceDataVersion) {
    
    
    
    
    this.spaceDataVersion = spaceDataVersion;
    return this;
  }

   /**
   * Get spaceDataVersion
   * @return spaceDataVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "")

  public Integer getSpaceDataVersion() {
    return spaceDataVersion;
  }


  public void setSpaceDataVersion(Integer spaceDataVersion) {
    
    
    
    this.spaceDataVersion = spaceDataVersion;
  }


  public DeviceSendTelemetryResponse success(Boolean success) {
    
    
    
    
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    
    
    
    this.success = success;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DeviceSendTelemetryResponse instance itself
   */
  public DeviceSendTelemetryResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceSendTelemetryResponse deviceSendTelemetryResponse = (DeviceSendTelemetryResponse) o;
    return Objects.equals(this.configVersion, deviceSendTelemetryResponse.configVersion) &&
        Objects.equals(this.command, deviceSendTelemetryResponse.command) &&
        Objects.equals(this.infoVersion, deviceSendTelemetryResponse.infoVersion) &&
        Objects.equals(this.newLicenses, deviceSendTelemetryResponse.newLicenses) &&
        Objects.equals(this.latestFwVersion, deviceSendTelemetryResponse.latestFwVersion) &&
        Objects.equals(this.latestFwFileId, deviceSendTelemetryResponse.latestFwFileId) &&
        Objects.equals(this.spaceDataVersion, deviceSendTelemetryResponse.spaceDataVersion) &&
        Objects.equals(this.success, deviceSendTelemetryResponse.success)&&
        Objects.equals(this.additionalProperties, deviceSendTelemetryResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configVersion, command, infoVersion, newLicenses, latestFwVersion, latestFwFileId, spaceDataVersion, success, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceSendTelemetryResponse {\n");
    sb.append("    configVersion: ").append(toIndentedString(configVersion)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    infoVersion: ").append(toIndentedString(infoVersion)).append("\n");
    sb.append("    newLicenses: ").append(toIndentedString(newLicenses)).append("\n");
    sb.append("    latestFwVersion: ").append(toIndentedString(latestFwVersion)).append("\n");
    sb.append("    latestFwFileId: ").append(toIndentedString(latestFwFileId)).append("\n");
    sb.append("    spaceDataVersion: ").append(toIndentedString(spaceDataVersion)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config_version");
    openapiFields.add("command");
    openapiFields.add("info_version");
    openapiFields.add("new_licenses");
    openapiFields.add("latest_fw_version");
    openapiFields.add("latest_fw_file_id");
    openapiFields.add("space_data_version");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeviceSendTelemetryResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeviceSendTelemetryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceSendTelemetryResponse is not found in the empty JSON string", DeviceSendTelemetryResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("latest_fw_version") != null && !jsonObj.get("latest_fw_version").isJsonNull()) && !jsonObj.get("latest_fw_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_fw_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_fw_version").toString()));
      }
      if ((jsonObj.get("latest_fw_file_id") != null && !jsonObj.get("latest_fw_file_id").isJsonNull()) && !jsonObj.get("latest_fw_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_fw_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_fw_file_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceSendTelemetryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceSendTelemetryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceSendTelemetryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceSendTelemetryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceSendTelemetryResponse>() {
           @Override
           public void write(JsonWriter out, DeviceSendTelemetryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceSendTelemetryResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DeviceSendTelemetryResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeviceSendTelemetryResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeviceSendTelemetryResponse
  * @throws IOException if the JSON string is invalid with respect to DeviceSendTelemetryResponse
  */
  public static DeviceSendTelemetryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceSendTelemetryResponse.class);
  }

 /**
  * Convert an instance of DeviceSendTelemetryResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

