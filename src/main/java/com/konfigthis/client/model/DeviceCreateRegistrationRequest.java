/*
 * Testing API
 * Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DeviceCreateRegistrationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DeviceCreateRegistrationRequest {
  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private String mac;

  public static final String SERIALIZED_NAME_SN = "sn";
  @SerializedName(SERIALIZED_NAME_SN)
  private String sn;

  public static final String SERIALIZED_NAME_CLOUD_ID = "cloud_id";
  @SerializedName(SERIALIZED_NAME_CLOUD_ID)
  private String cloudId;

  public static final String SERIALIZED_NAME_FIRMWARE_VERSION = "firmware_version";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_VERSION)
  private String firmwareVersion = "1.0.0";

  public static final String SERIALIZED_NAME_HARDWARE_KEY = "hardware_key";
  @SerializedName(SERIALIZED_NAME_HARDWARE_KEY)
  private String hardwareKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Object details;

  public static final String SERIALIZED_NAME_SUB_MODEL = "sub_model";
  @SerializedName(SERIALIZED_NAME_SUB_MODEL)
  private String subModel;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public DeviceCreateRegistrationRequest() {
  }

  public DeviceCreateRegistrationRequest mac(String mac) {
    
    
    
    
    this.mac = mac;
    return this;
  }

   /**
   * MAC address of the device
   * @return mac
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MAC address of the device")

  public String getMac() {
    return mac;
  }


  public void setMac(String mac) {
    
    
    
    this.mac = mac;
  }


  public DeviceCreateRegistrationRequest sn(String sn) {
    
    
    
    
    this.sn = sn;
    return this;
  }

   /**
   * Unique device serial number
   * @return sn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique device serial number")

  public String getSn() {
    return sn;
  }


  public void setSn(String sn) {
    
    
    
    this.sn = sn;
  }


  public DeviceCreateRegistrationRequest cloudId(String cloudId) {
    
    
    
    
    this.cloudId = cloudId;
    return this;
  }

   /**
   * Unique device identifier (must specify this or mac)
   * @return cloudId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique device identifier (must specify this or mac)")

  public String getCloudId() {
    return cloudId;
  }


  public void setCloudId(String cloudId) {
    
    
    
    this.cloudId = cloudId;
  }


  public DeviceCreateRegistrationRequest firmwareVersion(String firmwareVersion) {
    
    
    
    
    this.firmwareVersion = firmwareVersion;
    return this;
  }

   /**
   * Semver based firmware version
   * @return firmwareVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.0.0", required = true, value = "Semver based firmware version")

  public String getFirmwareVersion() {
    return firmwareVersion;
  }


  public void setFirmwareVersion(String firmwareVersion) {
    
    
    
    this.firmwareVersion = firmwareVersion;
  }


  public DeviceCreateRegistrationRequest hardwareKey(String hardwareKey) {
    
    
    
    
    this.hardwareKey = hardwareKey;
    return this;
  }

   /**
   * Key defined in the model&#39;s hardware key section
   * @return hardwareKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Key defined in the model's hardware key section")

  public String getHardwareKey() {
    return hardwareKey;
  }


  public void setHardwareKey(String hardwareKey) {
    
    
    
    this.hardwareKey = hardwareKey;
  }


  public DeviceCreateRegistrationRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Display name for the end-user
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Display name for the end-user")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public DeviceCreateRegistrationRequest details(Object details) {
    
    
    
    
    this.details = details;
    return this;
  }

   /**
   * Generic JSON object with unconstrained data
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Generic JSON object with unconstrained data")

  public Object getDetails() {
    return details;
  }


  public void setDetails(Object details) {
    
    
    
    this.details = details;
  }


  public DeviceCreateRegistrationRequest subModel(String subModel) {
    
    
    
    
    this.subModel = subModel;
    return this;
  }

   /**
   * Additional model details text
   * @return subModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional model details text")

  public String getSubModel() {
    return subModel;
  }


  public void setSubModel(String subModel) {
    
    
    
    this.subModel = subModel;
  }


  public DeviceCreateRegistrationRequest parentId(String parentId) {
    
    
    
    
    this.parentId = parentId;
    return this;
  }

   /**
   * UUID of the parent device
   * @return parentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UUID of the parent device")

  public String getParentId() {
    return parentId;
  }


  public void setParentId(String parentId) {
    
    
    
    this.parentId = parentId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DeviceCreateRegistrationRequest instance itself
   */
  public DeviceCreateRegistrationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceCreateRegistrationRequest deviceCreateRegistrationRequest = (DeviceCreateRegistrationRequest) o;
    return Objects.equals(this.mac, deviceCreateRegistrationRequest.mac) &&
        Objects.equals(this.sn, deviceCreateRegistrationRequest.sn) &&
        Objects.equals(this.cloudId, deviceCreateRegistrationRequest.cloudId) &&
        Objects.equals(this.firmwareVersion, deviceCreateRegistrationRequest.firmwareVersion) &&
        Objects.equals(this.hardwareKey, deviceCreateRegistrationRequest.hardwareKey) &&
        Objects.equals(this.name, deviceCreateRegistrationRequest.name) &&
        Objects.equals(this.details, deviceCreateRegistrationRequest.details) &&
        Objects.equals(this.subModel, deviceCreateRegistrationRequest.subModel) &&
        Objects.equals(this.parentId, deviceCreateRegistrationRequest.parentId)&&
        Objects.equals(this.additionalProperties, deviceCreateRegistrationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mac, sn, cloudId, firmwareVersion, hardwareKey, name, details, subModel, parentId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceCreateRegistrationRequest {\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    sn: ").append(toIndentedString(sn)).append("\n");
    sb.append("    cloudId: ").append(toIndentedString(cloudId)).append("\n");
    sb.append("    firmwareVersion: ").append(toIndentedString(firmwareVersion)).append("\n");
    sb.append("    hardwareKey: ").append(toIndentedString(hardwareKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    subModel: ").append(toIndentedString(subModel)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mac");
    openapiFields.add("sn");
    openapiFields.add("cloud_id");
    openapiFields.add("firmware_version");
    openapiFields.add("hardware_key");
    openapiFields.add("name");
    openapiFields.add("details");
    openapiFields.add("sub_model");
    openapiFields.add("parent_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sn");
    openapiRequiredFields.add("firmware_version");
    openapiRequiredFields.add("hardware_key");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeviceCreateRegistrationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeviceCreateRegistrationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceCreateRegistrationRequest is not found in the empty JSON string", DeviceCreateRegistrationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceCreateRegistrationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("mac") != null && !jsonObj.get("mac").isJsonNull()) && !jsonObj.get("mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac").toString()));
      }
      if (!jsonObj.get("sn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sn").toString()));
      }
      if ((jsonObj.get("cloud_id") != null && !jsonObj.get("cloud_id").isJsonNull()) && !jsonObj.get("cloud_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud_id").toString()));
      }
      if (!jsonObj.get("firmware_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmware_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmware_version").toString()));
      }
      if (!jsonObj.get("hardware_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hardware_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hardware_key").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sub_model") != null && !jsonObj.get("sub_model").isJsonNull()) && !jsonObj.get("sub_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_model").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceCreateRegistrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceCreateRegistrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceCreateRegistrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceCreateRegistrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceCreateRegistrationRequest>() {
           @Override
           public void write(JsonWriter out, DeviceCreateRegistrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceCreateRegistrationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DeviceCreateRegistrationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeviceCreateRegistrationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeviceCreateRegistrationRequest
  * @throws IOException if the JSON string is invalid with respect to DeviceCreateRegistrationRequest
  */
  public static DeviceCreateRegistrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceCreateRegistrationRequest.class);
  }

 /**
  * Convert an instance of DeviceCreateRegistrationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

