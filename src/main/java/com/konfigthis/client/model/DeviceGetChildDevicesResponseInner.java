/*
 * Testing API
 * Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DeviceGetChildDevicesResponseInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DeviceGetChildDevicesResponseInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SN = "sn";
  @SerializedName(SERIALIZED_NAME_SN)
  private String sn;

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private Object mac = null;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Object state = null;

  public static final String SERIALIZED_NAME_LAST_SEEN = "last_seen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private String lastSeen;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FIRMWARE_VERSION = "firmware_version";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_VERSION)
  private String firmwareVersion;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_CLAIMED = "claimed";
  @SerializedName(SERIALIZED_NAME_CLAIMED)
  private String claimed;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Object details;

  public DeviceGetChildDevicesResponseInner() {
  }

  public DeviceGetChildDevicesResponseInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4389c73f-eeea-4fca-8d34-072ec0b5469a", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public DeviceGetChildDevicesResponseInner sn(String sn) {
    
    
    
    
    this.sn = sn;
    return this;
  }

   /**
   * Get sn
   * @return sn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "32412", value = "")

  public String getSn() {
    return sn;
  }


  public void setSn(String sn) {
    
    
    
    this.sn = sn;
  }


  public DeviceGetChildDevicesResponseInner mac(Object mac) {
    
    
    
    
    this.mac = mac;
    return this;
  }

   /**
   * Get mac
   * @return mac
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMac() {
    return mac;
  }


  public void setMac(Object mac) {
    
    
    
    this.mac = mac;
  }


  public DeviceGetChildDevicesResponseInner state(Object state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getState() {
    return state;
  }


  public void setState(Object state) {
    
    
    
    this.state = state;
  }


  public DeviceGetChildDevicesResponseInner lastSeen(String lastSeen) {
    
    
    
    
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * Get lastSeen
   * @return lastSeen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-12-08T14:32:11.318Z", value = "")

  public String getLastSeen() {
    return lastSeen;
  }


  public void setLastSeen(String lastSeen) {
    
    
    
    this.lastSeen = lastSeen;
  }


  public DeviceGetChildDevicesResponseInner name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "future guy", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public DeviceGetChildDevicesResponseInner firmwareVersion(String firmwareVersion) {
    
    
    
    
    this.firmwareVersion = firmwareVersion;
    return this;
  }

   /**
   * Get firmwareVersion
   * @return firmwareVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.0.1", value = "")

  public String getFirmwareVersion() {
    return firmwareVersion;
  }


  public void setFirmwareVersion(String firmwareVersion) {
    
    
    
    this.firmwareVersion = firmwareVersion;
  }


  public DeviceGetChildDevicesResponseInner vendor(String vendor) {
    
    
    
    
    this.vendor = vendor;
    return this;
  }

   /**
   * Get vendor
   * @return vendor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The future", value = "")

  public String getVendor() {
    return vendor;
  }


  public void setVendor(String vendor) {
    
    
    
    this.vendor = vendor;
  }


  public DeviceGetChildDevicesResponseInner model(String model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "T-1000", value = "")

  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    
    
    
    this.model = model;
  }


  public DeviceGetChildDevicesResponseInner claimed(String claimed) {
    
    
    
    
    this.claimed = claimed;
    return this;
  }

   /**
   * Get claimed
   * @return claimed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Skynet", value = "")

  public String getClaimed() {
    return claimed;
  }


  public void setClaimed(String claimed) {
    
    
    
    this.claimed = claimed;
  }


  public DeviceGetChildDevicesResponseInner details(Object details) {
    
    
    
    
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDetails() {
    return details;
  }


  public void setDetails(Object details) {
    
    
    
    this.details = details;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DeviceGetChildDevicesResponseInner instance itself
   */
  public DeviceGetChildDevicesResponseInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceGetChildDevicesResponseInner deviceGetChildDevicesResponseInner = (DeviceGetChildDevicesResponseInner) o;
    return Objects.equals(this.id, deviceGetChildDevicesResponseInner.id) &&
        Objects.equals(this.sn, deviceGetChildDevicesResponseInner.sn) &&
        Objects.equals(this.mac, deviceGetChildDevicesResponseInner.mac) &&
        Objects.equals(this.state, deviceGetChildDevicesResponseInner.state) &&
        Objects.equals(this.lastSeen, deviceGetChildDevicesResponseInner.lastSeen) &&
        Objects.equals(this.name, deviceGetChildDevicesResponseInner.name) &&
        Objects.equals(this.firmwareVersion, deviceGetChildDevicesResponseInner.firmwareVersion) &&
        Objects.equals(this.vendor, deviceGetChildDevicesResponseInner.vendor) &&
        Objects.equals(this.model, deviceGetChildDevicesResponseInner.model) &&
        Objects.equals(this.claimed, deviceGetChildDevicesResponseInner.claimed) &&
        Objects.equals(this.details, deviceGetChildDevicesResponseInner.details)&&
        Objects.equals(this.additionalProperties, deviceGetChildDevicesResponseInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, sn, mac, state, lastSeen, name, firmwareVersion, vendor, model, claimed, details, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceGetChildDevicesResponseInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sn: ").append(toIndentedString(sn)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    firmwareVersion: ").append(toIndentedString(firmwareVersion)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    claimed: ").append(toIndentedString(claimed)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("sn");
    openapiFields.add("mac");
    openapiFields.add("state");
    openapiFields.add("last_seen");
    openapiFields.add("name");
    openapiFields.add("firmware_version");
    openapiFields.add("vendor");
    openapiFields.add("model");
    openapiFields.add("claimed");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeviceGetChildDevicesResponseInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeviceGetChildDevicesResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceGetChildDevicesResponseInner is not found in the empty JSON string", DeviceGetChildDevicesResponseInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("sn") != null && !jsonObj.get("sn").isJsonNull()) && !jsonObj.get("sn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sn").toString()));
      }
      if ((jsonObj.get("last_seen") != null && !jsonObj.get("last_seen").isJsonNull()) && !jsonObj.get("last_seen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_seen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_seen").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("firmware_version") != null && !jsonObj.get("firmware_version").isJsonNull()) && !jsonObj.get("firmware_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmware_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmware_version").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("claimed") != null && !jsonObj.get("claimed").isJsonNull()) && !jsonObj.get("claimed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceGetChildDevicesResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceGetChildDevicesResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceGetChildDevicesResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceGetChildDevicesResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceGetChildDevicesResponseInner>() {
           @Override
           public void write(JsonWriter out, DeviceGetChildDevicesResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceGetChildDevicesResponseInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DeviceGetChildDevicesResponseInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeviceGetChildDevicesResponseInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeviceGetChildDevicesResponseInner
  * @throws IOException if the JSON string is invalid with respect to DeviceGetChildDevicesResponseInner
  */
  public static DeviceGetChildDevicesResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceGetChildDevicesResponseInner.class);
  }

 /**
  * Convert an instance of DeviceGetChildDevicesResponseInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

