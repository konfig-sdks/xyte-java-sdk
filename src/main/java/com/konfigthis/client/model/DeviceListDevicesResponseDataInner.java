/*
 * Testing API
 * Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DeviceListDevicesResponseDataInnerFirmware;
import com.konfigthis.client.model.DeviceListDevicesResponseDataInnerModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DeviceListDevicesResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DeviceListDevicesResponseDataInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SN = "sn";
  @SerializedName(SERIALIZED_NAME_SN)
  private String sn;

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private String mac;

  public static final String SERIALIZED_NAME_CLOUD_ID = "cloud_id";
  @SerializedName(SERIALIZED_NAME_CLOUD_ID)
  private String cloudId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Object status = null;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "last_seen_at";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private String lastSeenAt;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Object details;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Object state;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private DeviceListDevicesResponseDataInnerModel model;

  public static final String SERIALIZED_NAME_FIRMWARE = "firmware";
  @SerializedName(SERIALIZED_NAME_FIRMWARE)
  private DeviceListDevicesResponseDataInnerFirmware firmware;

  public DeviceListDevicesResponseDataInner() {
  }

  public DeviceListDevicesResponseDataInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "....-03cfda750cfa", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public DeviceListDevicesResponseDataInner sn(String sn) {
    
    
    
    
    this.sn = sn;
    return this;
  }

   /**
   * Get sn
   * @return sn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "")

  public String getSn() {
    return sn;
  }


  public void setSn(String sn) {
    
    
    
    this.sn = sn;
  }


  public DeviceListDevicesResponseDataInner mac(String mac) {
    
    
    
    
    this.mac = mac;
    return this;
  }

   /**
   * Get mac
   * @return mac
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-36334592", value = "")

  public String getMac() {
    return mac;
  }


  public void setMac(String mac) {
    
    
    
    this.mac = mac;
  }


  public DeviceListDevicesResponseDataInner cloudId(String cloudId) {
    
    
    
    
    this.cloudId = cloudId;
    return this;
  }

   /**
   * Get cloudId
   * @return cloudId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "....", value = "")

  public String getCloudId() {
    return cloudId;
  }


  public void setCloudId(String cloudId) {
    
    
    
    this.cloudId = cloudId;
  }


  public DeviceListDevicesResponseDataInner status(Object status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getStatus() {
    return status;
  }


  public void setStatus(Object status) {
    
    
    
    this.status = status;
  }


  public DeviceListDevicesResponseDataInner lastSeenAt(String lastSeenAt) {
    
    
    
    
    this.lastSeenAt = lastSeenAt;
    return this;
  }

   /**
   * Get lastSeenAt
   * @return lastSeenAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-11-06T09:52:47.546Z", value = "")

  public String getLastSeenAt() {
    return lastSeenAt;
  }


  public void setLastSeenAt(String lastSeenAt) {
    
    
    
    this.lastSeenAt = lastSeenAt;
  }


  public DeviceListDevicesResponseDataInner details(Object details) {
    
    
    
    
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDetails() {
    return details;
  }


  public void setDetails(Object details) {
    
    
    
    this.details = details;
  }


  public DeviceListDevicesResponseDataInner state(Object state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getState() {
    return state;
  }


  public void setState(Object state) {
    
    
    
    this.state = state;
  }


  public DeviceListDevicesResponseDataInner model(DeviceListDevicesResponseDataInnerModel model) {
    
    
    
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceListDevicesResponseDataInnerModel getModel() {
    return model;
  }


  public void setModel(DeviceListDevicesResponseDataInnerModel model) {
    
    
    
    this.model = model;
  }


  public DeviceListDevicesResponseDataInner firmware(DeviceListDevicesResponseDataInnerFirmware firmware) {
    
    
    
    
    this.firmware = firmware;
    return this;
  }

   /**
   * Get firmware
   * @return firmware
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceListDevicesResponseDataInnerFirmware getFirmware() {
    return firmware;
  }


  public void setFirmware(DeviceListDevicesResponseDataInnerFirmware firmware) {
    
    
    
    this.firmware = firmware;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DeviceListDevicesResponseDataInner instance itself
   */
  public DeviceListDevicesResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceListDevicesResponseDataInner deviceListDevicesResponseDataInner = (DeviceListDevicesResponseDataInner) o;
    return Objects.equals(this.id, deviceListDevicesResponseDataInner.id) &&
        Objects.equals(this.sn, deviceListDevicesResponseDataInner.sn) &&
        Objects.equals(this.mac, deviceListDevicesResponseDataInner.mac) &&
        Objects.equals(this.cloudId, deviceListDevicesResponseDataInner.cloudId) &&
        Objects.equals(this.status, deviceListDevicesResponseDataInner.status) &&
        Objects.equals(this.lastSeenAt, deviceListDevicesResponseDataInner.lastSeenAt) &&
        Objects.equals(this.details, deviceListDevicesResponseDataInner.details) &&
        Objects.equals(this.state, deviceListDevicesResponseDataInner.state) &&
        Objects.equals(this.model, deviceListDevicesResponseDataInner.model) &&
        Objects.equals(this.firmware, deviceListDevicesResponseDataInner.firmware)&&
        Objects.equals(this.additionalProperties, deviceListDevicesResponseDataInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, sn, mac, cloudId, status, lastSeenAt, details, state, model, firmware, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceListDevicesResponseDataInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sn: ").append(toIndentedString(sn)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    cloudId: ").append(toIndentedString(cloudId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    firmware: ").append(toIndentedString(firmware)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("sn");
    openapiFields.add("mac");
    openapiFields.add("cloud_id");
    openapiFields.add("status");
    openapiFields.add("last_seen_at");
    openapiFields.add("details");
    openapiFields.add("state");
    openapiFields.add("model");
    openapiFields.add("firmware");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeviceListDevicesResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeviceListDevicesResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceListDevicesResponseDataInner is not found in the empty JSON string", DeviceListDevicesResponseDataInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("sn") != null && !jsonObj.get("sn").isJsonNull()) && !jsonObj.get("sn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sn").toString()));
      }
      if ((jsonObj.get("mac") != null && !jsonObj.get("mac").isJsonNull()) && !jsonObj.get("mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac").toString()));
      }
      if ((jsonObj.get("cloud_id") != null && !jsonObj.get("cloud_id").isJsonNull()) && !jsonObj.get("cloud_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud_id").toString()));
      }
      if ((jsonObj.get("last_seen_at") != null && !jsonObj.get("last_seen_at").isJsonNull()) && !jsonObj.get("last_seen_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_seen_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_seen_at").toString()));
      }
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        DeviceListDevicesResponseDataInnerModel.validateJsonObject(jsonObj.getAsJsonObject("model"));
      }
      // validate the optional field `firmware`
      if (jsonObj.get("firmware") != null && !jsonObj.get("firmware").isJsonNull()) {
        DeviceListDevicesResponseDataInnerFirmware.validateJsonObject(jsonObj.getAsJsonObject("firmware"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceListDevicesResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceListDevicesResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceListDevicesResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceListDevicesResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceListDevicesResponseDataInner>() {
           @Override
           public void write(JsonWriter out, DeviceListDevicesResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceListDevicesResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DeviceListDevicesResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeviceListDevicesResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeviceListDevicesResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to DeviceListDevicesResponseDataInner
  */
  public static DeviceListDevicesResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceListDevicesResponseDataInner.class);
  }

 /**
  * Convert an instance of DeviceListDevicesResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

