/*
 * Testing API
 * Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DeviceAppendDumpFileRequest;
import com.konfigthis.client.model.DeviceAppendDumpFileResponse;
import com.konfigthis.client.model.DeviceCloseIncidentResponse;
import com.konfigthis.client.model.DeviceCreateRegistrationRequest;
import com.konfigthis.client.model.DeviceCreateRegistrationResponse;
import com.konfigthis.client.model.DeviceDeleteDeviceResponse;
import com.konfigthis.client.model.DeviceGetChildDevicesResponseInner;
import com.konfigthis.client.model.DeviceGetConfig200Response;
import com.konfigthis.client.model.DeviceGetConfigResponse;
import com.konfigthis.client.model.DeviceGetIncidentsResponse;
import com.konfigthis.client.model.DeviceGetInfo200Response;
import com.konfigthis.client.model.DeviceGetInfoResponse;
import com.konfigthis.client.model.DeviceGetSpaceInfoResponse;
import com.konfigthis.client.model.DeviceGetTelemetriesResponseInner;
import com.konfigthis.client.model.DeviceListCommandsResponse;
import com.konfigthis.client.model.DeviceListDevicesResponse;
import com.konfigthis.client.model.DeviceOpenIncidentRequest;
import com.konfigthis.client.model.DeviceOpenIncidentResponse;
import com.konfigthis.client.model.DeviceRegisterChildDeviceRequest;
import com.konfigthis.client.model.DeviceRegisterChildDeviceResponse;
import com.konfigthis.client.model.DeviceSendChildTelemetriesRequest;
import com.konfigthis.client.model.DeviceSendChildTelemetriesResponse;
import com.konfigthis.client.model.DeviceSendCommandRequest;
import com.konfigthis.client.model.DeviceSendCommandResponse;
import com.konfigthis.client.model.DeviceSendDumpFileRequest;
import com.konfigthis.client.model.DeviceSendDumpFileResponse;
import com.konfigthis.client.model.DeviceSendTelemetryRequest;
import com.konfigthis.client.model.DeviceSendTelemetryResponse;
import com.konfigthis.client.model.DeviceSetConfigRequest;
import com.konfigthis.client.model.DeviceSetConfigResponse;
import com.konfigthis.client.model.DeviceUpdateCloudSettingsRequest;
import com.konfigthis.client.model.DeviceUpdateDeviceRequest;
import com.konfigthis.client.model.DeviceUpdateDeviceResponse;
import com.konfigthis.client.model.DeviceUpdateLicenseRequest;
import com.konfigthis.client.model.DeviceUpdateLicenseResponse;
import java.io.File;
import java.time.LocalDate;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DeviceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeviceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DeviceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call appendDumpFileCall(String deviceId, String dumpId, DeviceAppendDumpFileRequest deviceAppendDumpFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceAppendDumpFileRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/dumps/{dumpId}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "dumpId" + "}", localVarApiClient.escapeString(dumpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendDumpFileValidateBeforeCall(String deviceId, String dumpId, DeviceAppendDumpFileRequest deviceAppendDumpFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling appendDumpFile(Async)");
        }

        // verify the required parameter 'dumpId' is set
        if (dumpId == null) {
            throw new ApiException("Missing the required parameter 'dumpId' when calling appendDumpFile(Async)");
        }

        return appendDumpFileCall(deviceId, dumpId, deviceAppendDumpFileRequest, _callback);

    }


    private ApiResponse<DeviceAppendDumpFileResponse> appendDumpFileWithHttpInfo(String deviceId, String dumpId, DeviceAppendDumpFileRequest deviceAppendDumpFileRequest) throws ApiException {
        okhttp3.Call localVarCall = appendDumpFileValidateBeforeCall(deviceId, dumpId, deviceAppendDumpFileRequest, null);
        Type localVarReturnType = new TypeToken<DeviceAppendDumpFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call appendDumpFileAsync(String deviceId, String dumpId, DeviceAppendDumpFileRequest deviceAppendDumpFileRequest, final ApiCallback<DeviceAppendDumpFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendDumpFileValidateBeforeCall(deviceId, dumpId, deviceAppendDumpFileRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceAppendDumpFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AppendDumpFileRequestBuilder {
        private final String RAW_BODY;
        private final String deviceId;
        private final String dumpId;

        private AppendDumpFileRequestBuilder(String RAW_BODY, String deviceId, String dumpId) {
            this.RAW_BODY = RAW_BODY;
            this.deviceId = deviceId;
            this.dumpId = dumpId;
        }

        /**
         * Build call for appendDumpFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceAppendDumpFileRequest deviceAppendDumpFileRequest = buildBodyParams();
            return appendDumpFileCall(deviceId, dumpId, deviceAppendDumpFileRequest, _callback);
        }

        private DeviceAppendDumpFileRequest buildBodyParams() {
            DeviceAppendDumpFileRequest deviceAppendDumpFileRequest = new DeviceAppendDumpFileRequest();
            deviceAppendDumpFileRequest.RAW_BODY(this.RAW_BODY);
            return deviceAppendDumpFileRequest;
        }

        /**
         * Execute appendDumpFile request
         * @return DeviceAppendDumpFileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceAppendDumpFileResponse execute() throws ApiException {
            DeviceAppendDumpFileRequest deviceAppendDumpFileRequest = buildBodyParams();
            ApiResponse<DeviceAppendDumpFileResponse> localVarResp = appendDumpFileWithHttpInfo(deviceId, dumpId, deviceAppendDumpFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute appendDumpFile request with HTTP info returned
         * @return ApiResponse&lt;DeviceAppendDumpFileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceAppendDumpFileResponse> executeWithHttpInfo() throws ApiException {
            DeviceAppendDumpFileRequest deviceAppendDumpFileRequest = buildBodyParams();
            return appendDumpFileWithHttpInfo(deviceId, dumpId, deviceAppendDumpFileRequest);
        }

        /**
         * Execute appendDumpFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceAppendDumpFileResponse> _callback) throws ApiException {
            DeviceAppendDumpFileRequest deviceAppendDumpFileRequest = buildBodyParams();
            return appendDumpFileAsync(deviceId, dumpId, deviceAppendDumpFileRequest, _callback);
        }
    }

    /**
     * Append Dump File
     * 
     * @param deviceId  (required)
     * @param dumpId  (required)
     * @return AppendDumpFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AppendDumpFileRequestBuilder appendDumpFile(String RAW_BODY, String deviceId, String dumpId) throws IllegalArgumentException {
        if (RAW_BODY == null) throw new IllegalArgumentException("\"RAW_BODY\" is required but got null");
            

        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        if (dumpId == null) throw new IllegalArgumentException("\"dumpId\" is required but got null");
            

        return new AppendDumpFileRequestBuilder(RAW_BODY, deviceId, dumpId);
    }
    private okhttp3.Call closeIncidentCall(String deviceId, String incidentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/incidents/{incidentId}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "incidentId" + "}", localVarApiClient.escapeString(incidentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeIncidentValidateBeforeCall(String deviceId, String incidentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling closeIncident(Async)");
        }

        // verify the required parameter 'incidentId' is set
        if (incidentId == null) {
            throw new ApiException("Missing the required parameter 'incidentId' when calling closeIncident(Async)");
        }

        return closeIncidentCall(deviceId, incidentId, _callback);

    }


    private ApiResponse<DeviceCloseIncidentResponse> closeIncidentWithHttpInfo(String deviceId, String incidentId) throws ApiException {
        okhttp3.Call localVarCall = closeIncidentValidateBeforeCall(deviceId, incidentId, null);
        Type localVarReturnType = new TypeToken<DeviceCloseIncidentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call closeIncidentAsync(String deviceId, String incidentId, final ApiCallback<DeviceCloseIncidentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeIncidentValidateBeforeCall(deviceId, incidentId, _callback);
        Type localVarReturnType = new TypeToken<DeviceCloseIncidentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CloseIncidentRequestBuilder {
        private final String deviceId;
        private final String incidentId;

        private CloseIncidentRequestBuilder(String deviceId, String incidentId) {
            this.deviceId = deviceId;
            this.incidentId = incidentId;
        }

        /**
         * Build call for closeIncident
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return closeIncidentCall(deviceId, incidentId, _callback);
        }


        /**
         * Execute closeIncident request
         * @return DeviceCloseIncidentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceCloseIncidentResponse execute() throws ApiException {
            ApiResponse<DeviceCloseIncidentResponse> localVarResp = closeIncidentWithHttpInfo(deviceId, incidentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute closeIncident request with HTTP info returned
         * @return ApiResponse&lt;DeviceCloseIncidentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceCloseIncidentResponse> executeWithHttpInfo() throws ApiException {
            return closeIncidentWithHttpInfo(deviceId, incidentId);
        }

        /**
         * Execute closeIncident request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceCloseIncidentResponse> _callback) throws ApiException {
            return closeIncidentAsync(deviceId, incidentId, _callback);
        }
    }

    /**
     * Close Incident
     * 
     * @param deviceId Unique Device ID (required)
     * @param incidentId The unique id of the incident to close (required)
     * @return CloseIncidentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CloseIncidentRequestBuilder closeIncident(String deviceId, String incidentId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        if (incidentId == null) throw new IllegalArgumentException("\"incidentId\" is required but got null");
            

        return new CloseIncidentRequestBuilder(deviceId, incidentId);
    }
    private okhttp3.Call createRegistrationCall(DeviceCreateRegistrationRequest deviceCreateRegistrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceCreateRegistrationRequest;

        // create path and map variables
        String localVarPath = "/v1/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRegistrationValidateBeforeCall(DeviceCreateRegistrationRequest deviceCreateRegistrationRequest, final ApiCallback _callback) throws ApiException {
        return createRegistrationCall(deviceCreateRegistrationRequest, _callback);

    }


    private ApiResponse<DeviceCreateRegistrationResponse> createRegistrationWithHttpInfo(DeviceCreateRegistrationRequest deviceCreateRegistrationRequest) throws ApiException {
        okhttp3.Call localVarCall = createRegistrationValidateBeforeCall(deviceCreateRegistrationRequest, null);
        Type localVarReturnType = new TypeToken<DeviceCreateRegistrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRegistrationAsync(DeviceCreateRegistrationRequest deviceCreateRegistrationRequest, final ApiCallback<DeviceCreateRegistrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRegistrationValidateBeforeCall(deviceCreateRegistrationRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceCreateRegistrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRegistrationRequestBuilder {
        private final String sn;
        private final String firmwareVersion;
        private final String hardwareKey;
        private String mac;
        private String cloudId;
        private String name;
        private Object details;
        private String subModel;
        private String parentId;

        private CreateRegistrationRequestBuilder(String sn, String firmwareVersion, String hardwareKey) {
            this.sn = sn;
            this.firmwareVersion = firmwareVersion;
            this.hardwareKey = hardwareKey;
        }

        /**
         * Set mac
         * @param mac MAC address of the device (optional)
         * @return CreateRegistrationRequestBuilder
         */
        public CreateRegistrationRequestBuilder mac(String mac) {
            this.mac = mac;
            return this;
        }
        
        /**
         * Set cloudId
         * @param cloudId Unique device identifier (must specify this or mac) (optional)
         * @return CreateRegistrationRequestBuilder
         */
        public CreateRegistrationRequestBuilder cloudId(String cloudId) {
            this.cloudId = cloudId;
            return this;
        }
        
        /**
         * Set name
         * @param name Display name for the end-user (optional)
         * @return CreateRegistrationRequestBuilder
         */
        public CreateRegistrationRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set details
         * @param details Generic JSON object with unconstrained data (optional)
         * @return CreateRegistrationRequestBuilder
         */
        public CreateRegistrationRequestBuilder details(Object details) {
            this.details = details;
            return this;
        }
        
        /**
         * Set subModel
         * @param subModel Additional model details text (optional)
         * @return CreateRegistrationRequestBuilder
         */
        public CreateRegistrationRequestBuilder subModel(String subModel) {
            this.subModel = subModel;
            return this;
        }
        
        /**
         * Set parentId
         * @param parentId UUID of the parent device (optional)
         * @return CreateRegistrationRequestBuilder
         */
        public CreateRegistrationRequestBuilder parentId(String parentId) {
            this.parentId = parentId;
            return this;
        }
        
        /**
         * Build call for createRegistration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> 2XX </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceCreateRegistrationRequest deviceCreateRegistrationRequest = buildBodyParams();
            return createRegistrationCall(deviceCreateRegistrationRequest, _callback);
        }

        private DeviceCreateRegistrationRequest buildBodyParams() {
            DeviceCreateRegistrationRequest deviceCreateRegistrationRequest = new DeviceCreateRegistrationRequest();
            deviceCreateRegistrationRequest.mac(this.mac);
            deviceCreateRegistrationRequest.sn(this.sn);
            deviceCreateRegistrationRequest.cloudId(this.cloudId);
            deviceCreateRegistrationRequest.firmwareVersion(this.firmwareVersion);
            deviceCreateRegistrationRequest.hardwareKey(this.hardwareKey);
            deviceCreateRegistrationRequest.name(this.name);
            deviceCreateRegistrationRequest.details(this.details);
            deviceCreateRegistrationRequest.subModel(this.subModel);
            deviceCreateRegistrationRequest.parentId(this.parentId);
            return deviceCreateRegistrationRequest;
        }

        /**
         * Execute createRegistration request
         * @return DeviceCreateRegistrationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> 2XX </td><td>  -  </td></tr>
         </table>
         */
        public DeviceCreateRegistrationResponse execute() throws ApiException {
            DeviceCreateRegistrationRequest deviceCreateRegistrationRequest = buildBodyParams();
            ApiResponse<DeviceCreateRegistrationResponse> localVarResp = createRegistrationWithHttpInfo(deviceCreateRegistrationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRegistration request with HTTP info returned
         * @return ApiResponse&lt;DeviceCreateRegistrationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> 2XX </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceCreateRegistrationResponse> executeWithHttpInfo() throws ApiException {
            DeviceCreateRegistrationRequest deviceCreateRegistrationRequest = buildBodyParams();
            return createRegistrationWithHttpInfo(deviceCreateRegistrationRequest);
        }

        /**
         * Execute createRegistration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> 2XX </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceCreateRegistrationResponse> _callback) throws ApiException {
            DeviceCreateRegistrationRequest deviceCreateRegistrationRequest = buildBodyParams();
            return createRegistrationAsync(deviceCreateRegistrationRequest, _callback);
        }
    }

    /**
     * Register Device
     * 
     * @return CreateRegistrationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> 2XX </td><td>  -  </td></tr>
     </table>
     */
    public CreateRegistrationRequestBuilder createRegistration(String sn, String firmwareVersion, String hardwareKey) throws IllegalArgumentException {
        if (sn == null) throw new IllegalArgumentException("\"sn\" is required but got null");
            

        if (firmwareVersion == null) throw new IllegalArgumentException("\"firmwareVersion\" is required but got null");
            

        if (hardwareKey == null) throw new IllegalArgumentException("\"hardwareKey\" is required but got null");
            

        return new CreateRegistrationRequestBuilder(sn, firmwareVersion, hardwareKey);
    }
    private okhttp3.Call deleteDeviceCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/devices/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeviceValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteDevice(Async)");
        }

        return deleteDeviceCall(deviceId, _callback);

    }


    private ApiResponse<DeviceDeleteDeviceResponse> deleteDeviceWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = deleteDeviceValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<DeviceDeleteDeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDeviceAsync(String deviceId, final ApiCallback<DeviceDeleteDeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeviceValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<DeviceDeleteDeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteDeviceRequestBuilder {
        private final String deviceId;

        private DeleteDeviceRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for deleteDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDeviceCall(deviceId, _callback);
        }


        /**
         * Execute deleteDevice request
         * @return DeviceDeleteDeviceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceDeleteDeviceResponse execute() throws ApiException {
            ApiResponse<DeviceDeleteDeviceResponse> localVarResp = deleteDeviceWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteDevice request with HTTP info returned
         * @return ApiResponse&lt;DeviceDeleteDeviceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceDeleteDeviceResponse> executeWithHttpInfo() throws ApiException {
            return deleteDeviceWithHttpInfo(deviceId);
        }

        /**
         * Execute deleteDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceDeleteDeviceResponse> _callback) throws ApiException {
            return deleteDeviceAsync(deviceId, _callback);
        }
    }

    /**
     * Delete Device
     * 
     * @param deviceId Device&#39;s unique ID (required)
     * @return DeleteDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDeviceRequestBuilder deleteDevice(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new DeleteDeviceRequestBuilder(deviceId);
    }
    private okhttp3.Call getAllDeviceStateHistoriesCall(String status, OffsetDateTime from, OffsetDateTime to, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/devices/histories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllDeviceStateHistoriesValidateBeforeCall(String status, OffsetDateTime from, OffsetDateTime to, Integer page, final ApiCallback _callback) throws ApiException {
        return getAllDeviceStateHistoriesCall(status, from, to, page, _callback);

    }


    private ApiResponse<String> getAllDeviceStateHistoriesWithHttpInfo(String status, OffsetDateTime from, OffsetDateTime to, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getAllDeviceStateHistoriesValidateBeforeCall(status, from, to, page, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllDeviceStateHistoriesAsync(String status, OffsetDateTime from, OffsetDateTime to, Integer page, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllDeviceStateHistoriesValidateBeforeCall(status, from, to, page, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllDeviceStateHistoriesRequestBuilder {
        private String status;
        private OffsetDateTime from;
        private OffsetDateTime to;
        private Integer page;

        private GetAllDeviceStateHistoriesRequestBuilder() {
        }

        /**
         * Set status
         * @param status Filter by state: online, offline, unavailable, error (optional)
         * @return GetAllDeviceStateHistoriesRequestBuilder
         */
        public GetAllDeviceStateHistoriesRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set from
         * @param from Query range (optional)
         * @return GetAllDeviceStateHistoriesRequestBuilder
         */
        public GetAllDeviceStateHistoriesRequestBuilder from(OffsetDateTime from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to Query range (optional)
         * @return GetAllDeviceStateHistoriesRequestBuilder
         */
        public GetAllDeviceStateHistoriesRequestBuilder to(OffsetDateTime to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set page
         * @param page Pagination (500 records per page) (optional)
         * @return GetAllDeviceStateHistoriesRequestBuilder
         */
        public GetAllDeviceStateHistoriesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getAllDeviceStateHistories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllDeviceStateHistoriesCall(status, from, to, page, _callback);
        }


        /**
         * Execute getAllDeviceStateHistories request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getAllDeviceStateHistoriesWithHttpInfo(status, from, to, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllDeviceStateHistories request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getAllDeviceStateHistoriesWithHttpInfo(status, from, to, page);
        }

        /**
         * Execute getAllDeviceStateHistories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getAllDeviceStateHistoriesAsync(status, from, to, page, _callback);
        }
    }

    /**
     * Get All Device&#39;s State History
     * 
     * @return GetAllDeviceStateHistoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetAllDeviceStateHistoriesRequestBuilder getAllDeviceStateHistories() throws IllegalArgumentException {
        return new GetAllDeviceStateHistoriesRequestBuilder();
    }
    private okhttp3.Call getChildDevicesCall(String parentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{parent_id}/children"
            .replace("{" + "parent_id" + "}", localVarApiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChildDevicesValidateBeforeCall(String parentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling getChildDevices(Async)");
        }

        return getChildDevicesCall(parentId, _callback);

    }


    private ApiResponse<List<DeviceGetChildDevicesResponseInner>> getChildDevicesWithHttpInfo(String parentId) throws ApiException {
        okhttp3.Call localVarCall = getChildDevicesValidateBeforeCall(parentId, null);
        Type localVarReturnType = new TypeToken<List<DeviceGetChildDevicesResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChildDevicesAsync(String parentId, final ApiCallback<List<DeviceGetChildDevicesResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChildDevicesValidateBeforeCall(parentId, _callback);
        Type localVarReturnType = new TypeToken<List<DeviceGetChildDevicesResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChildDevicesRequestBuilder {
        private final String parentId;

        private GetChildDevicesRequestBuilder(String parentId) {
            this.parentId = parentId;
        }

        /**
         * Build call for getChildDevices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChildDevicesCall(parentId, _callback);
        }


        /**
         * Execute getChildDevices request
         * @return List&lt;DeviceGetChildDevicesResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<DeviceGetChildDevicesResponseInner> execute() throws ApiException {
            ApiResponse<List<DeviceGetChildDevicesResponseInner>> localVarResp = getChildDevicesWithHttpInfo(parentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChildDevices request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DeviceGetChildDevicesResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DeviceGetChildDevicesResponseInner>> executeWithHttpInfo() throws ApiException {
            return getChildDevicesWithHttpInfo(parentId);
        }

        /**
         * Execute getChildDevices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DeviceGetChildDevicesResponseInner>> _callback) throws ApiException {
            return getChildDevicesAsync(parentId, _callback);
        }
    }

    /**
     * Get Child Devices
     * 
     * @param parentId The ID of the parent device (required)
     * @return GetChildDevicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetChildDevicesRequestBuilder getChildDevices(String parentId) throws IllegalArgumentException {
        if (parentId == null) throw new IllegalArgumentException("\"parentId\" is required but got null");
            

        return new GetChildDevicesRequestBuilder(parentId);
    }
    private okhttp3.Call getCommandCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/command"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommandValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getCommand(Async)");
        }

        return getCommandCall(deviceId, _callback);

    }


    private ApiResponse<Object> getCommandWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getCommandValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommandAsync(String deviceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommandValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommandRequestBuilder {
        private final String deviceId;

        private GetCommandRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getCommand
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommandCall(deviceId, _callback);
        }


        /**
         * Execute getCommand request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getCommandWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCommand request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getCommandWithHttpInfo(deviceId);
        }

        /**
         * Execute getCommand request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getCommandAsync(deviceId, _callback);
        }
    }

    /**
     * Get Command
     * 
     * @param deviceId  (required)
     * @return GetCommandRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCommandRequestBuilder getCommand(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetCommandRequestBuilder(deviceId);
    }
    private okhttp3.Call getConfigCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/config"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getConfig(Async)");
        }

        return getConfigCall(deviceId, _callback);

    }


    private ApiResponse<DeviceGetConfigResponse> getConfigWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getConfigValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<DeviceGetConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigAsync(String deviceId, final ApiCallback<DeviceGetConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<DeviceGetConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConfigRequestBuilder {
        private final String deviceId;

        private GetConfigRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigCall(deviceId, _callback);
        }


        /**
         * Execute getConfig request
         * @return DeviceGetConfigResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceGetConfigResponse execute() throws ApiException {
            ApiResponse<DeviceGetConfigResponse> localVarResp = getConfigWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConfig request with HTTP info returned
         * @return ApiResponse&lt;DeviceGetConfigResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceGetConfigResponse> executeWithHttpInfo() throws ApiException {
            return getConfigWithHttpInfo(deviceId);
        }

        /**
         * Execute getConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceGetConfigResponse> _callback) throws ApiException {
            return getConfigAsync(deviceId, _callback);
        }
    }

    /**
     * Get Config
     * 
     * @param deviceId  (required)
     * @return GetConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigRequestBuilder getConfig(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetConfigRequestBuilder(deviceId);
    }
    private okhttp3.Call getConfig_0Call(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/devices/{device_id}/config"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfig_0ValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getConfig_0(Async)");
        }

        return getConfig_0Call(deviceId, _callback);

    }


    private ApiResponse<DeviceGetConfig200Response> getConfig_0WithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getConfig_0ValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<DeviceGetConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfig_0Async(String deviceId, final ApiCallback<DeviceGetConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfig_0ValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<DeviceGetConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConfig0RequestBuilder {
        private final String deviceId;

        private GetConfig0RequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getConfig_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfig_0Call(deviceId, _callback);
        }


        /**
         * Execute getConfig_0 request
         * @return DeviceGetConfig200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceGetConfig200Response execute() throws ApiException {
            ApiResponse<DeviceGetConfig200Response> localVarResp = getConfig_0WithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConfig_0 request with HTTP info returned
         * @return ApiResponse&lt;DeviceGetConfig200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceGetConfig200Response> executeWithHttpInfo() throws ApiException {
            return getConfig_0WithHttpInfo(deviceId);
        }

        /**
         * Execute getConfig_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceGetConfig200Response> _callback) throws ApiException {
            return getConfig_0Async(deviceId, _callback);
        }
    }

    /**
     * Get Device Configuration
     * 
     * @param deviceId Unique Device ID (required)
     * @return GetConfig0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetConfig0RequestBuilder getConfig_0(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetConfig0RequestBuilder(deviceId);
    }
    private okhttp3.Call getFileCall(String deviceId, String fileUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/files/{fileUuid}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "fileUuid" + "}", localVarApiClient.escapeString(fileUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(String deviceId, String fileUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getFile(Async)");
        }

        // verify the required parameter 'fileUuid' is set
        if (fileUuid == null) {
            throw new ApiException("Missing the required parameter 'fileUuid' when calling getFile(Async)");
        }

        return getFileCall(deviceId, fileUuid, _callback);

    }


    private ApiResponse<String> getFileWithHttpInfo(String deviceId, String fileUuid) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(deviceId, fileUuid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFileAsync(String deviceId, String fileUuid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(deviceId, fileUuid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFileRequestBuilder {
        private final String deviceId;
        private final String fileUuid;

        private GetFileRequestBuilder(String deviceId, String fileUuid) {
            this.deviceId = deviceId;
            this.fileUuid = fileUuid;
        }

        /**
         * Build call for getFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileCall(deviceId, fileUuid, _callback);
        }


        /**
         * Execute getFile request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getFileWithHttpInfo(deviceId, fileUuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFile request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getFileWithHttpInfo(deviceId, fileUuid);
        }

        /**
         * Execute getFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getFileAsync(deviceId, fileUuid, _callback);
        }
    }

    /**
     * Get File
     * 
     * @param deviceId  (required)
     * @param fileUuid  (required)
     * @return GetFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetFileRequestBuilder getFile(String deviceId, String fileUuid) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        if (fileUuid == null) throw new IllegalArgumentException("\"fileUuid\" is required but got null");
            

        return new GetFileRequestBuilder(deviceId, fileUuid);
    }
    private okhttp3.Call getFilesCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/files"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getFiles(Async)");
        }

        return getFilesCall(deviceId, _callback);

    }


    private ApiResponse<String> getFilesWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getFilesValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFilesAsync(String deviceId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFilesRequestBuilder {
        private final String deviceId;

        private GetFilesRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getFiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFilesCall(deviceId, _callback);
        }


        /**
         * Execute getFiles request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getFilesWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFiles request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getFilesWithHttpInfo(deviceId);
        }

        /**
         * Execute getFiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getFilesAsync(deviceId, _callback);
        }
    }

    /**
     * Get Files
     * 
     * @param deviceId  (required)
     * @return GetFilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetFilesRequestBuilder getFiles(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetFilesRequestBuilder(deviceId);
    }
    private okhttp3.Call getIncidentsCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/incidents"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIncidentsValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getIncidents(Async)");
        }

        return getIncidentsCall(deviceId, _callback);

    }


    private ApiResponse<DeviceGetIncidentsResponse> getIncidentsWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getIncidentsValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<DeviceGetIncidentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIncidentsAsync(String deviceId, final ApiCallback<DeviceGetIncidentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIncidentsValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<DeviceGetIncidentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIncidentsRequestBuilder {
        private final String deviceId;

        private GetIncidentsRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getIncidents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIncidentsCall(deviceId, _callback);
        }


        /**
         * Execute getIncidents request
         * @return DeviceGetIncidentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceGetIncidentsResponse execute() throws ApiException {
            ApiResponse<DeviceGetIncidentsResponse> localVarResp = getIncidentsWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIncidents request with HTTP info returned
         * @return ApiResponse&lt;DeviceGetIncidentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceGetIncidentsResponse> executeWithHttpInfo() throws ApiException {
            return getIncidentsWithHttpInfo(deviceId);
        }

        /**
         * Execute getIncidents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceGetIncidentsResponse> _callback) throws ApiException {
            return getIncidentsAsync(deviceId, _callback);
        }
    }

    /**
     * Get Incidents
     * 
     * @param deviceId Device&#39;s unique ID (required)
     * @return GetIncidentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public GetIncidentsRequestBuilder getIncidents(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetIncidentsRequestBuilder(deviceId);
    }
    private okhttp3.Call getInfoCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getInfo(Async)");
        }

        return getInfoCall(deviceId, _callback);

    }


    private ApiResponse<DeviceGetInfoResponse> getInfoWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<DeviceGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String deviceId, final ApiCallback<DeviceGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<DeviceGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String deviceId;

        private GetInfoRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(deviceId, _callback);
        }


        /**
         * Execute getInfo request
         * @return DeviceGetInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceGetInfoResponse execute() throws ApiException {
            ApiResponse<DeviceGetInfoResponse> localVarResp = getInfoWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;DeviceGetInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceGetInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(deviceId);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceGetInfoResponse> _callback) throws ApiException {
            return getInfoAsync(deviceId, _callback);
        }
    }

    /**
     * Get Device Info
     * 
     * @param deviceId  (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetInfoRequestBuilder(deviceId);
    }
    private okhttp3.Call getInfo_0Call(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/devices/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfo_0ValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getInfo_0(Async)");
        }

        return getInfo_0Call(deviceId, _callback);

    }


    private ApiResponse<DeviceGetInfo200Response> getInfo_0WithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getInfo_0ValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<DeviceGetInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfo_0Async(String deviceId, final ApiCallback<DeviceGetInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfo_0ValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<DeviceGetInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfo0RequestBuilder {
        private final String deviceId;

        private GetInfo0RequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getInfo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfo_0Call(deviceId, _callback);
        }


        /**
         * Execute getInfo_0 request
         * @return DeviceGetInfo200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceGetInfo200Response execute() throws ApiException {
            ApiResponse<DeviceGetInfo200Response> localVarResp = getInfo_0WithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo_0 request with HTTP info returned
         * @return ApiResponse&lt;DeviceGetInfo200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceGetInfo200Response> executeWithHttpInfo() throws ApiException {
            return getInfo_0WithHttpInfo(deviceId);
        }

        /**
         * Execute getInfo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceGetInfo200Response> _callback) throws ApiException {
            return getInfo_0Async(deviceId, _callback);
        }
    }

    /**
     * Get Device Info
     * 
     * @param deviceId Device&#39;s unique ID (required)
     * @return GetInfo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetInfo0RequestBuilder getInfo_0(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetInfo0RequestBuilder(deviceId);
    }
    private okhttp3.Call getLicenseCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/license"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicenseValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getLicense(Async)");
        }

        return getLicenseCall(deviceId, _callback);

    }


    private ApiResponse<Object> getLicenseWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getLicenseValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLicenseAsync(String deviceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicenseValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLicenseRequestBuilder {
        private final String deviceId;

        private GetLicenseRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getLicense
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLicenseCall(deviceId, _callback);
        }


        /**
         * Execute getLicense request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getLicenseWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLicense request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getLicenseWithHttpInfo(deviceId);
        }

        /**
         * Execute getLicense request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getLicenseAsync(deviceId, _callback);
        }
    }

    /**
     * Get License
     * 
     * @param deviceId  (required)
     * @return GetLicenseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetLicenseRequestBuilder getLicense(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetLicenseRequestBuilder(deviceId);
    }
    private okhttp3.Call getLicensesCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/licenses"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicensesValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getLicenses(Async)");
        }

        return getLicensesCall(deviceId, _callback);

    }


    private ApiResponse<Object> getLicensesWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getLicensesValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLicensesAsync(String deviceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicensesValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLicensesRequestBuilder {
        private final String deviceId;

        private GetLicensesRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getLicenses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLicensesCall(deviceId, _callback);
        }


        /**
         * Execute getLicenses request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getLicensesWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLicenses request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getLicensesWithHttpInfo(deviceId);
        }

        /**
         * Execute getLicenses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getLicensesAsync(deviceId, _callback);
        }
    }

    /**
     * Get Licenses
     * 
     * @param deviceId  (required)
     * @return GetLicensesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetLicensesRequestBuilder getLicenses(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetLicensesRequestBuilder(deviceId);
    }
    private okhttp3.Call getSpaceInfoCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/space"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpaceInfoValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getSpaceInfo(Async)");
        }

        return getSpaceInfoCall(deviceId, _callback);

    }


    private ApiResponse<DeviceGetSpaceInfoResponse> getSpaceInfoWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getSpaceInfoValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<DeviceGetSpaceInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpaceInfoAsync(String deviceId, final ApiCallback<DeviceGetSpaceInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpaceInfoValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<DeviceGetSpaceInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpaceInfoRequestBuilder {
        private final String deviceId;

        private GetSpaceInfoRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getSpaceInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpaceInfoCall(deviceId, _callback);
        }


        /**
         * Execute getSpaceInfo request
         * @return DeviceGetSpaceInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceGetSpaceInfoResponse execute() throws ApiException {
            ApiResponse<DeviceGetSpaceInfoResponse> localVarResp = getSpaceInfoWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpaceInfo request with HTTP info returned
         * @return ApiResponse&lt;DeviceGetSpaceInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceGetSpaceInfoResponse> executeWithHttpInfo() throws ApiException {
            return getSpaceInfoWithHttpInfo(deviceId);
        }

        /**
         * Execute getSpaceInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceGetSpaceInfoResponse> _callback) throws ApiException {
            return getSpaceInfoAsync(deviceId, _callback);
        }
    }

    /**
     * Get Space Info
     * 
     * @param deviceId  (required)
     * @return GetSpaceInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public GetSpaceInfoRequestBuilder getSpaceInfo(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetSpaceInfoRequestBuilder(deviceId);
    }
    private okhttp3.Call getStateHistoryCall(String deviceId, String status, OffsetDateTime from, OffsetDateTime to, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/devices/{device_id}/history"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStateHistoryValidateBeforeCall(String deviceId, String status, OffsetDateTime from, OffsetDateTime to, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getStateHistory(Async)");
        }

        return getStateHistoryCall(deviceId, status, from, to, page, _callback);

    }


    private ApiResponse<String> getStateHistoryWithHttpInfo(String deviceId, String status, OffsetDateTime from, OffsetDateTime to, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getStateHistoryValidateBeforeCall(deviceId, status, from, to, page, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStateHistoryAsync(String deviceId, String status, OffsetDateTime from, OffsetDateTime to, Integer page, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStateHistoryValidateBeforeCall(deviceId, status, from, to, page, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStateHistoryRequestBuilder {
        private final String deviceId;
        private String status;
        private OffsetDateTime from;
        private OffsetDateTime to;
        private Integer page;

        private GetStateHistoryRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set status
         * @param status Filter by state: online, offline, unavailable, error (optional)
         * @return GetStateHistoryRequestBuilder
         */
        public GetStateHistoryRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set from
         * @param from Query range (optional)
         * @return GetStateHistoryRequestBuilder
         */
        public GetStateHistoryRequestBuilder from(OffsetDateTime from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to Query range (optional)
         * @return GetStateHistoryRequestBuilder
         */
        public GetStateHistoryRequestBuilder to(OffsetDateTime to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set page
         * @param page Pagination (500 records per page) (optional)
         * @return GetStateHistoryRequestBuilder
         */
        public GetStateHistoryRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getStateHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStateHistoryCall(deviceId, status, from, to, page, _callback);
        }


        /**
         * Execute getStateHistory request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getStateHistoryWithHttpInfo(deviceId, status, from, to, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStateHistory request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getStateHistoryWithHttpInfo(deviceId, status, from, to, page);
        }

        /**
         * Execute getStateHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getStateHistoryAsync(deviceId, status, from, to, page, _callback);
        }
    }

    /**
     * Get Device State History
     * 
     * @param deviceId Unique Device ID (required)
     * @return GetStateHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetStateHistoryRequestBuilder getStateHistory(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetStateHistoryRequestBuilder(deviceId);
    }
    private okhttp3.Call getTelemetriesCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/devices/{device_id}/telemetries"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTelemetriesValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getTelemetries(Async)");
        }

        return getTelemetriesCall(deviceId, _callback);

    }


    private ApiResponse<List<DeviceGetTelemetriesResponseInner>> getTelemetriesWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = getTelemetriesValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<List<DeviceGetTelemetriesResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTelemetriesAsync(String deviceId, final ApiCallback<List<DeviceGetTelemetriesResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTelemetriesValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<List<DeviceGetTelemetriesResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTelemetriesRequestBuilder {
        private final String deviceId;

        private GetTelemetriesRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Build call for getTelemetries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTelemetriesCall(deviceId, _callback);
        }


        /**
         * Execute getTelemetries request
         * @return List&lt;DeviceGetTelemetriesResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<DeviceGetTelemetriesResponseInner> execute() throws ApiException {
            ApiResponse<List<DeviceGetTelemetriesResponseInner>> localVarResp = getTelemetriesWithHttpInfo(deviceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTelemetries request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DeviceGetTelemetriesResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DeviceGetTelemetriesResponseInner>> executeWithHttpInfo() throws ApiException {
            return getTelemetriesWithHttpInfo(deviceId);
        }

        /**
         * Execute getTelemetries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DeviceGetTelemetriesResponseInner>> _callback) throws ApiException {
            return getTelemetriesAsync(deviceId, _callback);
        }
    }

    /**
     * Get Device Telemetries
     * 
     * @param deviceId Unique Device ID (required)
     * @return GetTelemetriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetTelemetriesRequestBuilder getTelemetries(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetTelemetriesRequestBuilder(deviceId);
    }
    private okhttp3.Call listCommandsCall(String deviceId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/devices/{device_id}/commands"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCommandsValidateBeforeCall(String deviceId, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling listCommands(Async)");
        }

        return listCommandsCall(deviceId, status, _callback);

    }


    private ApiResponse<DeviceListCommandsResponse> listCommandsWithHttpInfo(String deviceId, String status) throws ApiException {
        okhttp3.Call localVarCall = listCommandsValidateBeforeCall(deviceId, status, null);
        Type localVarReturnType = new TypeToken<DeviceListCommandsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCommandsAsync(String deviceId, String status, final ApiCallback<DeviceListCommandsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCommandsValidateBeforeCall(deviceId, status, _callback);
        Type localVarReturnType = new TypeToken<DeviceListCommandsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCommandsRequestBuilder {
        private final String deviceId;
        private String status;

        private ListCommandsRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set status
         * @param status Filter by command status: scheduled, pending, done, failed, aborted, in_progress (optional)
         * @return ListCommandsRequestBuilder
         */
        public ListCommandsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for listCommands
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCommandsCall(deviceId, status, _callback);
        }


        /**
         * Execute listCommands request
         * @return DeviceListCommandsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceListCommandsResponse execute() throws ApiException {
            ApiResponse<DeviceListCommandsResponse> localVarResp = listCommandsWithHttpInfo(deviceId, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCommands request with HTTP info returned
         * @return ApiResponse&lt;DeviceListCommandsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceListCommandsResponse> executeWithHttpInfo() throws ApiException {
            return listCommandsWithHttpInfo(deviceId, status);
        }

        /**
         * Execute listCommands request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceListCommandsResponse> _callback) throws ApiException {
            return listCommandsAsync(deviceId, status, _callback);
        }
    }

    /**
     * Get Device Commands
     * 
     * @param deviceId Unique Device ID (required)
     * @return ListCommandsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListCommandsRequestBuilder listCommands(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new ListCommandsRequestBuilder(deviceId);
    }
    private okhttp3.Call listDevicesCall(String modelId, String sn, String mac, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_id", modelId));
        }

        if (sn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sn", sn));
        }

        if (mac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac", mac));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDevicesValidateBeforeCall(String modelId, String sn, String mac, String page, final ApiCallback _callback) throws ApiException {
        return listDevicesCall(modelId, sn, mac, page, _callback);

    }


    private ApiResponse<DeviceListDevicesResponse> listDevicesWithHttpInfo(String modelId, String sn, String mac, String page) throws ApiException {
        okhttp3.Call localVarCall = listDevicesValidateBeforeCall(modelId, sn, mac, page, null);
        Type localVarReturnType = new TypeToken<DeviceListDevicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDevicesAsync(String modelId, String sn, String mac, String page, final ApiCallback<DeviceListDevicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDevicesValidateBeforeCall(modelId, sn, mac, page, _callback);
        Type localVarReturnType = new TypeToken<DeviceListDevicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDevicesRequestBuilder {
        private String modelId;
        private String sn;
        private String mac;
        private String page;

        private ListDevicesRequestBuilder() {
        }

        /**
         * Set modelId
         * @param modelId Filter by model id (optional)
         * @return ListDevicesRequestBuilder
         */
        public ListDevicesRequestBuilder modelId(String modelId) {
            this.modelId = modelId;
            return this;
        }
        
        /**
         * Set sn
         * @param sn Filter by Serial Number (optional)
         * @return ListDevicesRequestBuilder
         */
        public ListDevicesRequestBuilder sn(String sn) {
            this.sn = sn;
            return this;
        }
        
        /**
         * Set mac
         * @param mac Filter by MAC address (optional)
         * @return ListDevicesRequestBuilder
         */
        public ListDevicesRequestBuilder mac(String mac) {
            this.mac = mac;
            return this;
        }
        
        /**
         * Set page
         * @param page Pagination selector (optional)
         * @return ListDevicesRequestBuilder
         */
        public ListDevicesRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listDevices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDevicesCall(modelId, sn, mac, page, _callback);
        }


        /**
         * Execute listDevices request
         * @return DeviceListDevicesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceListDevicesResponse execute() throws ApiException {
            ApiResponse<DeviceListDevicesResponse> localVarResp = listDevicesWithHttpInfo(modelId, sn, mac, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDevices request with HTTP info returned
         * @return ApiResponse&lt;DeviceListDevicesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceListDevicesResponse> executeWithHttpInfo() throws ApiException {
            return listDevicesWithHttpInfo(modelId, sn, mac, page);
        }

        /**
         * Execute listDevices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceListDevicesResponse> _callback) throws ApiException {
            return listDevicesAsync(modelId, sn, mac, page, _callback);
        }
    }

    /**
     * List Devices
     * 
     * @return ListDevicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListDevicesRequestBuilder listDevices() throws IllegalArgumentException {
        return new ListDevicesRequestBuilder();
    }
    private okhttp3.Call openIncidentCall(String deviceId, DeviceOpenIncidentRequest deviceOpenIncidentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceOpenIncidentRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/incidents"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openIncidentValidateBeforeCall(String deviceId, DeviceOpenIncidentRequest deviceOpenIncidentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling openIncident(Async)");
        }

        return openIncidentCall(deviceId, deviceOpenIncidentRequest, _callback);

    }


    private ApiResponse<DeviceOpenIncidentResponse> openIncidentWithHttpInfo(String deviceId, DeviceOpenIncidentRequest deviceOpenIncidentRequest) throws ApiException {
        okhttp3.Call localVarCall = openIncidentValidateBeforeCall(deviceId, deviceOpenIncidentRequest, null);
        Type localVarReturnType = new TypeToken<DeviceOpenIncidentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call openIncidentAsync(String deviceId, DeviceOpenIncidentRequest deviceOpenIncidentRequest, final ApiCallback<DeviceOpenIncidentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = openIncidentValidateBeforeCall(deviceId, deviceOpenIncidentRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceOpenIncidentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OpenIncidentRequestBuilder {
        private final String title;
        private final String deviceId;
        private String description;
        private String priority;
        private String issue;
        private String RAW_BODY;

        private OpenIncidentRequestBuilder(String title, String deviceId) {
            this.title = title;
            this.deviceId = deviceId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return OpenIncidentRequestBuilder
         */
        public OpenIncidentRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set priority
         * @param priority Critical, High, Moderate, Low, Planning (optional, default to 3)
         * @return OpenIncidentRequestBuilder
         */
        public OpenIncidentRequestBuilder priority(String priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set issue
         * @param issue Short text to uniquely identify the issue (only one incident of each issue type can be open at a time) (optional, default to Randomly generated tag)
         * @return OpenIncidentRequestBuilder
         */
        public OpenIncidentRequestBuilder issue(String issue) {
            this.issue = issue;
            return this;
        }
        
        /**
         * Set RAW_BODY
         * @param RAW_BODY  (optional)
         * @return OpenIncidentRequestBuilder
         */
        public OpenIncidentRequestBuilder RAW_BODY(String RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Build call for openIncident
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceOpenIncidentRequest deviceOpenIncidentRequest = buildBodyParams();
            return openIncidentCall(deviceId, deviceOpenIncidentRequest, _callback);
        }

        private DeviceOpenIncidentRequest buildBodyParams() {
            DeviceOpenIncidentRequest deviceOpenIncidentRequest = new DeviceOpenIncidentRequest();
            deviceOpenIncidentRequest.title(this.title);
            deviceOpenIncidentRequest.description(this.description);
            if (this.priority != null)
            deviceOpenIncidentRequest.priority(DeviceOpenIncidentRequest.PriorityEnum.fromValue(this.priority));
            deviceOpenIncidentRequest.issue(this.issue);
            deviceOpenIncidentRequest.RAW_BODY(this.RAW_BODY);
            return deviceOpenIncidentRequest;
        }

        /**
         * Execute openIncident request
         * @return DeviceOpenIncidentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceOpenIncidentResponse execute() throws ApiException {
            DeviceOpenIncidentRequest deviceOpenIncidentRequest = buildBodyParams();
            ApiResponse<DeviceOpenIncidentResponse> localVarResp = openIncidentWithHttpInfo(deviceId, deviceOpenIncidentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute openIncident request with HTTP info returned
         * @return ApiResponse&lt;DeviceOpenIncidentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceOpenIncidentResponse> executeWithHttpInfo() throws ApiException {
            DeviceOpenIncidentRequest deviceOpenIncidentRequest = buildBodyParams();
            return openIncidentWithHttpInfo(deviceId, deviceOpenIncidentRequest);
        }

        /**
         * Execute openIncident request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceOpenIncidentResponse> _callback) throws ApiException {
            DeviceOpenIncidentRequest deviceOpenIncidentRequest = buildBodyParams();
            return openIncidentAsync(deviceId, deviceOpenIncidentRequest, _callback);
        }
    }

    /**
     * Open Incident
     * 
     * @param deviceId  (required)
     * @return OpenIncidentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public OpenIncidentRequestBuilder openIncident(String title, String deviceId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new OpenIncidentRequestBuilder(title, deviceId);
    }
    private okhttp3.Call registerChildDeviceCall(String parentId, DeviceRegisterChildDeviceRequest deviceRegisterChildDeviceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRegisterChildDeviceRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{parent_id}/children"
            .replace("{" + "parent_id" + "}", localVarApiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerChildDeviceValidateBeforeCall(String parentId, DeviceRegisterChildDeviceRequest deviceRegisterChildDeviceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling registerChildDevice(Async)");
        }

        return registerChildDeviceCall(parentId, deviceRegisterChildDeviceRequest, _callback);

    }


    private ApiResponse<DeviceRegisterChildDeviceResponse> registerChildDeviceWithHttpInfo(String parentId, DeviceRegisterChildDeviceRequest deviceRegisterChildDeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = registerChildDeviceValidateBeforeCall(parentId, deviceRegisterChildDeviceRequest, null);
        Type localVarReturnType = new TypeToken<DeviceRegisterChildDeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerChildDeviceAsync(String parentId, DeviceRegisterChildDeviceRequest deviceRegisterChildDeviceRequest, final ApiCallback<DeviceRegisterChildDeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerChildDeviceValidateBeforeCall(parentId, deviceRegisterChildDeviceRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceRegisterChildDeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterChildDeviceRequestBuilder {
        private final String firmwareVersion;
        private final String modelId;
        private final String parentId;
        private String subModel;
        private String sn;
        private String mac;
        private String name;
        private Object details;

        private RegisterChildDeviceRequestBuilder(String firmwareVersion, String modelId, String parentId) {
            this.firmwareVersion = firmwareVersion;
            this.modelId = modelId;
            this.parentId = parentId;
        }

        /**
         * Set subModel
         * @param subModel  (optional)
         * @return RegisterChildDeviceRequestBuilder
         */
        public RegisterChildDeviceRequestBuilder subModel(String subModel) {
            this.subModel = subModel;
            return this;
        }
        
        /**
         * Set sn
         * @param sn  (optional)
         * @return RegisterChildDeviceRequestBuilder
         */
        public RegisterChildDeviceRequestBuilder sn(String sn) {
            this.sn = sn;
            return this;
        }
        
        /**
         * Set mac
         * @param mac  (optional)
         * @return RegisterChildDeviceRequestBuilder
         */
        public RegisterChildDeviceRequestBuilder mac(String mac) {
            this.mac = mac;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return RegisterChildDeviceRequestBuilder
         */
        public RegisterChildDeviceRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set details
         * @param details  (optional)
         * @return RegisterChildDeviceRequestBuilder
         */
        public RegisterChildDeviceRequestBuilder details(Object details) {
            this.details = details;
            return this;
        }
        
        /**
         * Build call for registerChildDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceRegisterChildDeviceRequest deviceRegisterChildDeviceRequest = buildBodyParams();
            return registerChildDeviceCall(parentId, deviceRegisterChildDeviceRequest, _callback);
        }

        private DeviceRegisterChildDeviceRequest buildBodyParams() {
            DeviceRegisterChildDeviceRequest deviceRegisterChildDeviceRequest = new DeviceRegisterChildDeviceRequest();
            deviceRegisterChildDeviceRequest.firmwareVersion(this.firmwareVersion);
            deviceRegisterChildDeviceRequest.modelId(this.modelId);
            deviceRegisterChildDeviceRequest.subModel(this.subModel);
            deviceRegisterChildDeviceRequest.sn(this.sn);
            deviceRegisterChildDeviceRequest.mac(this.mac);
            deviceRegisterChildDeviceRequest.name(this.name);
            deviceRegisterChildDeviceRequest.details(this.details);
            return deviceRegisterChildDeviceRequest;
        }

        /**
         * Execute registerChildDevice request
         * @return DeviceRegisterChildDeviceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceRegisterChildDeviceResponse execute() throws ApiException {
            DeviceRegisterChildDeviceRequest deviceRegisterChildDeviceRequest = buildBodyParams();
            ApiResponse<DeviceRegisterChildDeviceResponse> localVarResp = registerChildDeviceWithHttpInfo(parentId, deviceRegisterChildDeviceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerChildDevice request with HTTP info returned
         * @return ApiResponse&lt;DeviceRegisterChildDeviceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceRegisterChildDeviceResponse> executeWithHttpInfo() throws ApiException {
            DeviceRegisterChildDeviceRequest deviceRegisterChildDeviceRequest = buildBodyParams();
            return registerChildDeviceWithHttpInfo(parentId, deviceRegisterChildDeviceRequest);
        }

        /**
         * Execute registerChildDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceRegisterChildDeviceResponse> _callback) throws ApiException {
            DeviceRegisterChildDeviceRequest deviceRegisterChildDeviceRequest = buildBodyParams();
            return registerChildDeviceAsync(parentId, deviceRegisterChildDeviceRequest, _callback);
        }
    }

    /**
     * Register Child Device
     * 
     * @param parentId The ID of the parent device (required)
     * @return RegisterChildDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public RegisterChildDeviceRequestBuilder registerChildDevice(String firmwareVersion, String modelId, String parentId) throws IllegalArgumentException {
        if (firmwareVersion == null) throw new IllegalArgumentException("\"firmwareVersion\" is required but got null");
            

        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        if (parentId == null) throw new IllegalArgumentException("\"parentId\" is required but got null");
            

        return new RegisterChildDeviceRequestBuilder(firmwareVersion, modelId, parentId);
    }
    private okhttp3.Call sendChildTelemetriesCall(String deviceId, DeviceSendChildTelemetriesRequest deviceSendChildTelemetriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceSendChildTelemetriesRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/children/telemetries"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendChildTelemetriesValidateBeforeCall(String deviceId, DeviceSendChildTelemetriesRequest deviceSendChildTelemetriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling sendChildTelemetries(Async)");
        }

        return sendChildTelemetriesCall(deviceId, deviceSendChildTelemetriesRequest, _callback);

    }


    private ApiResponse<DeviceSendChildTelemetriesResponse> sendChildTelemetriesWithHttpInfo(String deviceId, DeviceSendChildTelemetriesRequest deviceSendChildTelemetriesRequest) throws ApiException {
        okhttp3.Call localVarCall = sendChildTelemetriesValidateBeforeCall(deviceId, deviceSendChildTelemetriesRequest, null);
        Type localVarReturnType = new TypeToken<DeviceSendChildTelemetriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendChildTelemetriesAsync(String deviceId, DeviceSendChildTelemetriesRequest deviceSendChildTelemetriesRequest, final ApiCallback<DeviceSendChildTelemetriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendChildTelemetriesValidateBeforeCall(deviceId, deviceSendChildTelemetriesRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceSendChildTelemetriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendChildTelemetriesRequestBuilder {
        private final Object RAW_BODY;
        private final String deviceId;

        private SendChildTelemetriesRequestBuilder(Object RAW_BODY, String deviceId) {
            this.RAW_BODY = RAW_BODY;
            this.deviceId = deviceId;
        }

        /**
         * Build call for sendChildTelemetries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceSendChildTelemetriesRequest deviceSendChildTelemetriesRequest = buildBodyParams();
            return sendChildTelemetriesCall(deviceId, deviceSendChildTelemetriesRequest, _callback);
        }

        private DeviceSendChildTelemetriesRequest buildBodyParams() {
            DeviceSendChildTelemetriesRequest deviceSendChildTelemetriesRequest = new DeviceSendChildTelemetriesRequest();
            deviceSendChildTelemetriesRequest.RAW_BODY(this.RAW_BODY);
            return deviceSendChildTelemetriesRequest;
        }

        /**
         * Execute sendChildTelemetries request
         * @return DeviceSendChildTelemetriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceSendChildTelemetriesResponse execute() throws ApiException {
            DeviceSendChildTelemetriesRequest deviceSendChildTelemetriesRequest = buildBodyParams();
            ApiResponse<DeviceSendChildTelemetriesResponse> localVarResp = sendChildTelemetriesWithHttpInfo(deviceId, deviceSendChildTelemetriesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendChildTelemetries request with HTTP info returned
         * @return ApiResponse&lt;DeviceSendChildTelemetriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceSendChildTelemetriesResponse> executeWithHttpInfo() throws ApiException {
            DeviceSendChildTelemetriesRequest deviceSendChildTelemetriesRequest = buildBodyParams();
            return sendChildTelemetriesWithHttpInfo(deviceId, deviceSendChildTelemetriesRequest);
        }

        /**
         * Execute sendChildTelemetries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceSendChildTelemetriesResponse> _callback) throws ApiException {
            DeviceSendChildTelemetriesRequest deviceSendChildTelemetriesRequest = buildBodyParams();
            return sendChildTelemetriesAsync(deviceId, deviceSendChildTelemetriesRequest, _callback);
        }
    }

    /**
     * Send Child Telemetries
     * 
     * @param deviceId  (required)
     * @return SendChildTelemetriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public SendChildTelemetriesRequestBuilder sendChildTelemetries(Object RAW_BODY, String deviceId) throws IllegalArgumentException {
        if (RAW_BODY == null) throw new IllegalArgumentException("\"RAW_BODY\" is required but got null");
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new SendChildTelemetriesRequestBuilder(RAW_BODY, deviceId);
    }
    private okhttp3.Call sendCommandCall(String deviceId, DeviceSendCommandRequest deviceSendCommandRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceSendCommandRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/command"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendCommandValidateBeforeCall(String deviceId, DeviceSendCommandRequest deviceSendCommandRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling sendCommand(Async)");
        }

        return sendCommandCall(deviceId, deviceSendCommandRequest, _callback);

    }


    private ApiResponse<DeviceSendCommandResponse> sendCommandWithHttpInfo(String deviceId, DeviceSendCommandRequest deviceSendCommandRequest) throws ApiException {
        okhttp3.Call localVarCall = sendCommandValidateBeforeCall(deviceId, deviceSendCommandRequest, null);
        Type localVarReturnType = new TypeToken<DeviceSendCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendCommandAsync(String deviceId, DeviceSendCommandRequest deviceSendCommandRequest, final ApiCallback<DeviceSendCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendCommandValidateBeforeCall(deviceId, deviceSendCommandRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceSendCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendCommandRequestBuilder {
        private final String status;
        private final String id;
        private final String deviceId;
        private String message;

        private SendCommandRequestBuilder(String status, String id, String deviceId) {
            this.status = status;
            this.id = id;
            this.deviceId = deviceId;
        }

        /**
         * Set message
         * @param message  (optional)
         * @return SendCommandRequestBuilder
         */
        public SendCommandRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Build call for sendCommand
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceSendCommandRequest deviceSendCommandRequest = buildBodyParams();
            return sendCommandCall(deviceId, deviceSendCommandRequest, _callback);
        }

        private DeviceSendCommandRequest buildBodyParams() {
            DeviceSendCommandRequest deviceSendCommandRequest = new DeviceSendCommandRequest();
            deviceSendCommandRequest.status(this.status);
            deviceSendCommandRequest.message(this.message);
            deviceSendCommandRequest.id(this.id);
            return deviceSendCommandRequest;
        }

        /**
         * Execute sendCommand request
         * @return DeviceSendCommandResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceSendCommandResponse execute() throws ApiException {
            DeviceSendCommandRequest deviceSendCommandRequest = buildBodyParams();
            ApiResponse<DeviceSendCommandResponse> localVarResp = sendCommandWithHttpInfo(deviceId, deviceSendCommandRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendCommand request with HTTP info returned
         * @return ApiResponse&lt;DeviceSendCommandResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceSendCommandResponse> executeWithHttpInfo() throws ApiException {
            DeviceSendCommandRequest deviceSendCommandRequest = buildBodyParams();
            return sendCommandWithHttpInfo(deviceId, deviceSendCommandRequest);
        }

        /**
         * Execute sendCommand request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceSendCommandResponse> _callback) throws ApiException {
            DeviceSendCommandRequest deviceSendCommandRequest = buildBodyParams();
            return sendCommandAsync(deviceId, deviceSendCommandRequest, _callback);
        }
    }

    /**
     * Update Command
     * 
     * @param deviceId  (required)
     * @return SendCommandRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SendCommandRequestBuilder sendCommand(String status, String id, String deviceId) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new SendCommandRequestBuilder(status, id, deviceId);
    }
    private okhttp3.Call sendDumpFileCall(String deviceId, String mimeType, String filename, DeviceSendDumpFileRequest deviceSendDumpFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceSendDumpFileRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/dumps/{mime-type}/{filename}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "mime-type" + "}", localVarApiClient.escapeString(mimeType.toString()))
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendDumpFileValidateBeforeCall(String deviceId, String mimeType, String filename, DeviceSendDumpFileRequest deviceSendDumpFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling sendDumpFile(Async)");
        }

        // verify the required parameter 'mimeType' is set
        if (mimeType == null) {
            throw new ApiException("Missing the required parameter 'mimeType' when calling sendDumpFile(Async)");
        }

        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling sendDumpFile(Async)");
        }

        return sendDumpFileCall(deviceId, mimeType, filename, deviceSendDumpFileRequest, _callback);

    }


    private ApiResponse<DeviceSendDumpFileResponse> sendDumpFileWithHttpInfo(String deviceId, String mimeType, String filename, DeviceSendDumpFileRequest deviceSendDumpFileRequest) throws ApiException {
        okhttp3.Call localVarCall = sendDumpFileValidateBeforeCall(deviceId, mimeType, filename, deviceSendDumpFileRequest, null);
        Type localVarReturnType = new TypeToken<DeviceSendDumpFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendDumpFileAsync(String deviceId, String mimeType, String filename, DeviceSendDumpFileRequest deviceSendDumpFileRequest, final ApiCallback<DeviceSendDumpFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendDumpFileValidateBeforeCall(deviceId, mimeType, filename, deviceSendDumpFileRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceSendDumpFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendDumpFileRequestBuilder {
        private final File RAW_BODY;
        private final String deviceId;
        private final String mimeType;
        private final String filename;

        private SendDumpFileRequestBuilder(File RAW_BODY, String deviceId, String mimeType, String filename) {
            this.RAW_BODY = RAW_BODY;
            this.deviceId = deviceId;
            this.mimeType = mimeType;
            this.filename = filename;
        }

        /**
         * Build call for sendDumpFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceSendDumpFileRequest deviceSendDumpFileRequest = buildBodyParams();
            return sendDumpFileCall(deviceId, mimeType, filename, deviceSendDumpFileRequest, _callback);
        }

        private DeviceSendDumpFileRequest buildBodyParams() {
            DeviceSendDumpFileRequest deviceSendDumpFileRequest = new DeviceSendDumpFileRequest();
            deviceSendDumpFileRequest.RAW_BODY(this.RAW_BODY);
            return deviceSendDumpFileRequest;
        }

        /**
         * Execute sendDumpFile request
         * @return DeviceSendDumpFileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceSendDumpFileResponse execute() throws ApiException {
            DeviceSendDumpFileRequest deviceSendDumpFileRequest = buildBodyParams();
            ApiResponse<DeviceSendDumpFileResponse> localVarResp = sendDumpFileWithHttpInfo(deviceId, mimeType, filename, deviceSendDumpFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendDumpFile request with HTTP info returned
         * @return ApiResponse&lt;DeviceSendDumpFileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceSendDumpFileResponse> executeWithHttpInfo() throws ApiException {
            DeviceSendDumpFileRequest deviceSendDumpFileRequest = buildBodyParams();
            return sendDumpFileWithHttpInfo(deviceId, mimeType, filename, deviceSendDumpFileRequest);
        }

        /**
         * Execute sendDumpFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceSendDumpFileResponse> _callback) throws ApiException {
            DeviceSendDumpFileRequest deviceSendDumpFileRequest = buildBodyParams();
            return sendDumpFileAsync(deviceId, mimeType, filename, deviceSendDumpFileRequest, _callback);
        }
    }

    /**
     * Send Dump
     * 
     * @param deviceId  (required)
     * @param mimeType  (required)
     * @param filename  (required)
     * @return SendDumpFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public SendDumpFileRequestBuilder sendDumpFile(File RAW_BODY, String deviceId, String mimeType, String filename) throws IllegalArgumentException {
        if (RAW_BODY == null) throw new IllegalArgumentException("\"RAW_BODY\" is required but got null");
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        if (mimeType == null) throw new IllegalArgumentException("\"mimeType\" is required but got null");
            

        if (filename == null) throw new IllegalArgumentException("\"filename\" is required but got null");
            

        return new SendDumpFileRequestBuilder(RAW_BODY, deviceId, mimeType, filename);
    }
    private okhttp3.Call sendTelemetryCall(String deviceId, DeviceSendTelemetryRequest deviceSendTelemetryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceSendTelemetryRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/telemetry"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTelemetryValidateBeforeCall(String deviceId, DeviceSendTelemetryRequest deviceSendTelemetryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling sendTelemetry(Async)");
        }

        return sendTelemetryCall(deviceId, deviceSendTelemetryRequest, _callback);

    }


    private ApiResponse<DeviceSendTelemetryResponse> sendTelemetryWithHttpInfo(String deviceId, DeviceSendTelemetryRequest deviceSendTelemetryRequest) throws ApiException {
        okhttp3.Call localVarCall = sendTelemetryValidateBeforeCall(deviceId, deviceSendTelemetryRequest, null);
        Type localVarReturnType = new TypeToken<DeviceSendTelemetryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendTelemetryAsync(String deviceId, DeviceSendTelemetryRequest deviceSendTelemetryRequest, final ApiCallback<DeviceSendTelemetryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTelemetryValidateBeforeCall(deviceId, deviceSendTelemetryRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceSendTelemetryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendTelemetryRequestBuilder {
        private final String status;
        private final String deviceId;
        private LocalDate timestamp;
        private String telemetries;
        private Boolean override;

        private SendTelemetryRequestBuilder(String status, String deviceId) {
            this.status = status;
            this.deviceId = deviceId;
        }

        /**
         * Set timestamp
         * @param timestamp  (optional)
         * @return SendTelemetryRequestBuilder
         */
        public SendTelemetryRequestBuilder timestamp(LocalDate timestamp) {
            this.timestamp = timestamp;
            return this;
        }
        
        /**
         * Set telemetries
         * @param telemetries  (optional)
         * @return SendTelemetryRequestBuilder
         */
        public SendTelemetryRequestBuilder telemetries(String telemetries) {
            this.telemetries = telemetries;
            return this;
        }
        
        /**
         * Set override
         * @param override  (optional)
         * @return SendTelemetryRequestBuilder
         */
        public SendTelemetryRequestBuilder override(Boolean override) {
            this.override = override;
            return this;
        }
        
        /**
         * Build call for sendTelemetry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceSendTelemetryRequest deviceSendTelemetryRequest = buildBodyParams();
            return sendTelemetryCall(deviceId, deviceSendTelemetryRequest, _callback);
        }

        private DeviceSendTelemetryRequest buildBodyParams() {
            DeviceSendTelemetryRequest deviceSendTelemetryRequest = new DeviceSendTelemetryRequest();
            deviceSendTelemetryRequest.status(this.status);
            deviceSendTelemetryRequest.timestamp(this.timestamp);
            deviceSendTelemetryRequest.telemetries(this.telemetries);
            deviceSendTelemetryRequest.override(this.override);
            return deviceSendTelemetryRequest;
        }

        /**
         * Execute sendTelemetry request
         * @return DeviceSendTelemetryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceSendTelemetryResponse execute() throws ApiException {
            DeviceSendTelemetryRequest deviceSendTelemetryRequest = buildBodyParams();
            ApiResponse<DeviceSendTelemetryResponse> localVarResp = sendTelemetryWithHttpInfo(deviceId, deviceSendTelemetryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendTelemetry request with HTTP info returned
         * @return ApiResponse&lt;DeviceSendTelemetryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceSendTelemetryResponse> executeWithHttpInfo() throws ApiException {
            DeviceSendTelemetryRequest deviceSendTelemetryRequest = buildBodyParams();
            return sendTelemetryWithHttpInfo(deviceId, deviceSendTelemetryRequest);
        }

        /**
         * Execute sendTelemetry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceSendTelemetryResponse> _callback) throws ApiException {
            DeviceSendTelemetryRequest deviceSendTelemetryRequest = buildBodyParams();
            return sendTelemetryAsync(deviceId, deviceSendTelemetryRequest, _callback);
        }
    }

    /**
     * Send Telemetry
     * 
     * @param deviceId  (required)
     * @return SendTelemetryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public SendTelemetryRequestBuilder sendTelemetry(String status, String deviceId) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new SendTelemetryRequestBuilder(status, deviceId);
    }
    private okhttp3.Call setConfigCall(String deviceId, DeviceSetConfigRequest deviceSetConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceSetConfigRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/config"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setConfigValidateBeforeCall(String deviceId, DeviceSetConfigRequest deviceSetConfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling setConfig(Async)");
        }

        return setConfigCall(deviceId, deviceSetConfigRequest, _callback);

    }


    private ApiResponse<DeviceSetConfigResponse> setConfigWithHttpInfo(String deviceId, DeviceSetConfigRequest deviceSetConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = setConfigValidateBeforeCall(deviceId, deviceSetConfigRequest, null);
        Type localVarReturnType = new TypeToken<DeviceSetConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setConfigAsync(String deviceId, DeviceSetConfigRequest deviceSetConfigRequest, final ApiCallback<DeviceSetConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setConfigValidateBeforeCall(deviceId, deviceSetConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceSetConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetConfigRequestBuilder {
        private final String deviceId;
        private String RAW_BODY;

        private SetConfigRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY Put your raw JSON config here (optional)
         * @return SetConfigRequestBuilder
         */
        public SetConfigRequestBuilder RAW_BODY(String RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Build call for setConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceSetConfigRequest deviceSetConfigRequest = buildBodyParams();
            return setConfigCall(deviceId, deviceSetConfigRequest, _callback);
        }

        private DeviceSetConfigRequest buildBodyParams() {
            DeviceSetConfigRequest deviceSetConfigRequest = new DeviceSetConfigRequest();
            deviceSetConfigRequest.RAW_BODY(this.RAW_BODY);
            return deviceSetConfigRequest;
        }

        /**
         * Execute setConfig request
         * @return DeviceSetConfigResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceSetConfigResponse execute() throws ApiException {
            DeviceSetConfigRequest deviceSetConfigRequest = buildBodyParams();
            ApiResponse<DeviceSetConfigResponse> localVarResp = setConfigWithHttpInfo(deviceId, deviceSetConfigRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setConfig request with HTTP info returned
         * @return ApiResponse&lt;DeviceSetConfigResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceSetConfigResponse> executeWithHttpInfo() throws ApiException {
            DeviceSetConfigRequest deviceSetConfigRequest = buildBodyParams();
            return setConfigWithHttpInfo(deviceId, deviceSetConfigRequest);
        }

        /**
         * Execute setConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceSetConfigResponse> _callback) throws ApiException {
            DeviceSetConfigRequest deviceSetConfigRequest = buildBodyParams();
            return setConfigAsync(deviceId, deviceSetConfigRequest, _callback);
        }
    }

    /**
     * Set Config
     * 
     * @param deviceId  (required)
     * @return SetConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SetConfigRequestBuilder setConfig(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new SetConfigRequestBuilder(deviceId);
    }
    private okhttp3.Call updateCloudSettingsCall(String deviceId, DeviceUpdateCloudSettingsRequest deviceUpdateCloudSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceUpdateCloudSettingsRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/cloud_settings"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCloudSettingsValidateBeforeCall(String deviceId, DeviceUpdateCloudSettingsRequest deviceUpdateCloudSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updateCloudSettings(Async)");
        }

        return updateCloudSettingsCall(deviceId, deviceUpdateCloudSettingsRequest, _callback);

    }


    private ApiResponse<String> updateCloudSettingsWithHttpInfo(String deviceId, DeviceUpdateCloudSettingsRequest deviceUpdateCloudSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCloudSettingsValidateBeforeCall(deviceId, deviceUpdateCloudSettingsRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCloudSettingsAsync(String deviceId, DeviceUpdateCloudSettingsRequest deviceUpdateCloudSettingsRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCloudSettingsValidateBeforeCall(deviceId, deviceUpdateCloudSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCloudSettingsRequestBuilder {
        private final String deviceId;
        private String property;
        private String value;

        private UpdateCloudSettingsRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set property
         * @param property The Property you would like to change (optional)
         * @return UpdateCloudSettingsRequestBuilder
         */
        public UpdateCloudSettingsRequestBuilder property(String property) {
            this.property = property;
            return this;
        }
        
        /**
         * Set value
         * @param value The value to set for the given propery (optional)
         * @return UpdateCloudSettingsRequestBuilder
         */
        public UpdateCloudSettingsRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for updateCloudSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceUpdateCloudSettingsRequest deviceUpdateCloudSettingsRequest = buildBodyParams();
            return updateCloudSettingsCall(deviceId, deviceUpdateCloudSettingsRequest, _callback);
        }

        private DeviceUpdateCloudSettingsRequest buildBodyParams() {
            DeviceUpdateCloudSettingsRequest deviceUpdateCloudSettingsRequest = new DeviceUpdateCloudSettingsRequest();
            deviceUpdateCloudSettingsRequest.property(this.property);
            deviceUpdateCloudSettingsRequest.value(this.value);
            return deviceUpdateCloudSettingsRequest;
        }

        /**
         * Execute updateCloudSettings request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            DeviceUpdateCloudSettingsRequest deviceUpdateCloudSettingsRequest = buildBodyParams();
            ApiResponse<String> localVarResp = updateCloudSettingsWithHttpInfo(deviceId, deviceUpdateCloudSettingsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCloudSettings request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            DeviceUpdateCloudSettingsRequest deviceUpdateCloudSettingsRequest = buildBodyParams();
            return updateCloudSettingsWithHttpInfo(deviceId, deviceUpdateCloudSettingsRequest);
        }

        /**
         * Execute updateCloudSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            DeviceUpdateCloudSettingsRequest deviceUpdateCloudSettingsRequest = buildBodyParams();
            return updateCloudSettingsAsync(deviceId, deviceUpdateCloudSettingsRequest, _callback);
        }
    }

    /**
     * Set Cloud Settings
     * 
     * @param deviceId  (required)
     * @return UpdateCloudSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCloudSettingsRequestBuilder updateCloudSettings(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new UpdateCloudSettingsRequestBuilder(deviceId);
    }
    private okhttp3.Call updateDeviceCall(String deviceId, DeviceUpdateDeviceRequest deviceUpdateDeviceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceUpdateDeviceRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceValidateBeforeCall(String deviceId, DeviceUpdateDeviceRequest deviceUpdateDeviceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updateDevice(Async)");
        }

        return updateDeviceCall(deviceId, deviceUpdateDeviceRequest, _callback);

    }


    private ApiResponse<DeviceUpdateDeviceResponse> updateDeviceWithHttpInfo(String deviceId, DeviceUpdateDeviceRequest deviceUpdateDeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceValidateBeforeCall(deviceId, deviceUpdateDeviceRequest, null);
        Type localVarReturnType = new TypeToken<DeviceUpdateDeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDeviceAsync(String deviceId, DeviceUpdateDeviceRequest deviceUpdateDeviceRequest, final ApiCallback<DeviceUpdateDeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceValidateBeforeCall(deviceId, deviceUpdateDeviceRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceUpdateDeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDeviceRequestBuilder {
        private final String deviceId;
        private String firmwareVersion;
        private String name;
        private String spaceVersion;
        private String configVersion;
        private Object details;

        private UpdateDeviceRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set firmwareVersion
         * @param firmwareVersion  (optional)
         * @return UpdateDeviceRequestBuilder
         */
        public UpdateDeviceRequestBuilder firmwareVersion(String firmwareVersion) {
            this.firmwareVersion = firmwareVersion;
            return this;
        }
        
        /**
         * Set name
         * @param name Friendly device name (optional)
         * @return UpdateDeviceRequestBuilder
         */
        public UpdateDeviceRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set spaceVersion
         * @param spaceVersion Latest version of the space information the device has applied (optional)
         * @return UpdateDeviceRequestBuilder
         */
        public UpdateDeviceRequestBuilder spaceVersion(String spaceVersion) {
            this.spaceVersion = spaceVersion;
            return this;
        }
        
        /**
         * Set configVersion
         * @param configVersion Latest version of the configuration the device has applied (optional)
         * @return UpdateDeviceRequestBuilder
         */
        public UpdateDeviceRequestBuilder configVersion(String configVersion) {
            this.configVersion = configVersion;
            return this;
        }
        
        /**
         * Set details
         * @param details Details of the device. Will be visible in a different tab on the device&#39;s view calls &#39;Details&#39;. (optional)
         * @return UpdateDeviceRequestBuilder
         */
        public UpdateDeviceRequestBuilder details(Object details) {
            this.details = details;
            return this;
        }
        
        /**
         * Build call for updateDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceUpdateDeviceRequest deviceUpdateDeviceRequest = buildBodyParams();
            return updateDeviceCall(deviceId, deviceUpdateDeviceRequest, _callback);
        }

        private DeviceUpdateDeviceRequest buildBodyParams() {
            DeviceUpdateDeviceRequest deviceUpdateDeviceRequest = new DeviceUpdateDeviceRequest();
            deviceUpdateDeviceRequest.firmwareVersion(this.firmwareVersion);
            deviceUpdateDeviceRequest.name(this.name);
            deviceUpdateDeviceRequest.spaceVersion(this.spaceVersion);
            deviceUpdateDeviceRequest.configVersion(this.configVersion);
            deviceUpdateDeviceRequest.details(this.details);
            return deviceUpdateDeviceRequest;
        }

        /**
         * Execute updateDevice request
         * @return DeviceUpdateDeviceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceUpdateDeviceResponse execute() throws ApiException {
            DeviceUpdateDeviceRequest deviceUpdateDeviceRequest = buildBodyParams();
            ApiResponse<DeviceUpdateDeviceResponse> localVarResp = updateDeviceWithHttpInfo(deviceId, deviceUpdateDeviceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDevice request with HTTP info returned
         * @return ApiResponse&lt;DeviceUpdateDeviceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceUpdateDeviceResponse> executeWithHttpInfo() throws ApiException {
            DeviceUpdateDeviceRequest deviceUpdateDeviceRequest = buildBodyParams();
            return updateDeviceWithHttpInfo(deviceId, deviceUpdateDeviceRequest);
        }

        /**
         * Execute updateDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceUpdateDeviceResponse> _callback) throws ApiException {
            DeviceUpdateDeviceRequest deviceUpdateDeviceRequest = buildBodyParams();
            return updateDeviceAsync(deviceId, deviceUpdateDeviceRequest, _callback);
        }
    }

    /**
     * Update Device
     * 
     * @param deviceId  (required)
     * @return UpdateDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDeviceRequestBuilder updateDevice(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new UpdateDeviceRequestBuilder(deviceId);
    }
    private okhttp3.Call updateLicenseCall(String deviceId, DeviceUpdateLicenseRequest deviceUpdateLicenseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceUpdateLicenseRequest;

        // create path and map variables
        String localVarPath = "/v1/devices/{deviceId}/licenses"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLicenseValidateBeforeCall(String deviceId, DeviceUpdateLicenseRequest deviceUpdateLicenseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updateLicense(Async)");
        }

        return updateLicenseCall(deviceId, deviceUpdateLicenseRequest, _callback);

    }


    private ApiResponse<DeviceUpdateLicenseResponse> updateLicenseWithHttpInfo(String deviceId, DeviceUpdateLicenseRequest deviceUpdateLicenseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLicenseValidateBeforeCall(deviceId, deviceUpdateLicenseRequest, null);
        Type localVarReturnType = new TypeToken<DeviceUpdateLicenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLicenseAsync(String deviceId, DeviceUpdateLicenseRequest deviceUpdateLicenseRequest, final ApiCallback<DeviceUpdateLicenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLicenseValidateBeforeCall(deviceId, deviceUpdateLicenseRequest, _callback);
        Type localVarReturnType = new TypeToken<DeviceUpdateLicenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateLicenseRequestBuilder {
        private final String id;
        private final String state;
        private final String deviceId;
        private String error;

        private UpdateLicenseRequestBuilder(String id, String state, String deviceId) {
            this.id = id;
            this.state = state;
            this.deviceId = deviceId;
        }

        /**
         * Set error
         * @param error  (optional)
         * @return UpdateLicenseRequestBuilder
         */
        public UpdateLicenseRequestBuilder error(String error) {
            this.error = error;
            return this;
        }
        
        /**
         * Build call for updateLicense
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceUpdateLicenseRequest deviceUpdateLicenseRequest = buildBodyParams();
            return updateLicenseCall(deviceId, deviceUpdateLicenseRequest, _callback);
        }

        private DeviceUpdateLicenseRequest buildBodyParams() {
            DeviceUpdateLicenseRequest deviceUpdateLicenseRequest = new DeviceUpdateLicenseRequest();
            deviceUpdateLicenseRequest.id(this.id);
            deviceUpdateLicenseRequest.state(this.state);
            deviceUpdateLicenseRequest.error(this.error);
            return deviceUpdateLicenseRequest;
        }

        /**
         * Execute updateLicense request
         * @return DeviceUpdateLicenseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DeviceUpdateLicenseResponse execute() throws ApiException {
            DeviceUpdateLicenseRequest deviceUpdateLicenseRequest = buildBodyParams();
            ApiResponse<DeviceUpdateLicenseResponse> localVarResp = updateLicenseWithHttpInfo(deviceId, deviceUpdateLicenseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateLicense request with HTTP info returned
         * @return ApiResponse&lt;DeviceUpdateLicenseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeviceUpdateLicenseResponse> executeWithHttpInfo() throws ApiException {
            DeviceUpdateLicenseRequest deviceUpdateLicenseRequest = buildBodyParams();
            return updateLicenseWithHttpInfo(deviceId, deviceUpdateLicenseRequest);
        }

        /**
         * Execute updateLicense request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceUpdateLicenseResponse> _callback) throws ApiException {
            DeviceUpdateLicenseRequest deviceUpdateLicenseRequest = buildBodyParams();
            return updateLicenseAsync(deviceId, deviceUpdateLicenseRequest, _callback);
        }
    }

    /**
     * Update License
     * 
     * @param deviceId  (required)
     * @return UpdateLicenseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLicenseRequestBuilder updateLicense(String id, String state, String deviceId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (state == null) throw new IllegalArgumentException("\"state\" is required but got null");
            

        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new UpdateLicenseRequestBuilder(id, state, deviceId);
    }
}
