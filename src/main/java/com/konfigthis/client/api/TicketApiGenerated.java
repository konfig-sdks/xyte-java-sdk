/*
 * Testing API
 * Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TicketAddCommentRequest;
import com.konfigthis.client.model.TicketAddCommentResponse;
import com.konfigthis.client.model.TicketCloseResponse;
import com.konfigthis.client.model.TicketGetByIdResponse;
import com.konfigthis.client.model.TicketListResponseInner;
import com.konfigthis.client.model.TicketUpdateTicketByIdRequest;
import com.konfigthis.client.model.TicketUpdateTicketByIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TicketApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TicketApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TicketApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCommentCall(String ticketId, TicketAddCommentRequest ticketAddCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ticketAddCommentRequest;

        // create path and map variables
        String localVarPath = "/core/v1/partner/tickets/{ticket_id}/message"
            .replace("{" + "ticket_id" + "}", localVarApiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCommentValidateBeforeCall(String ticketId, TicketAddCommentRequest ticketAddCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling addComment(Async)");
        }

        return addCommentCall(ticketId, ticketAddCommentRequest, _callback);

    }


    private ApiResponse<TicketAddCommentResponse> addCommentWithHttpInfo(String ticketId, TicketAddCommentRequest ticketAddCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = addCommentValidateBeforeCall(ticketId, ticketAddCommentRequest, null);
        Type localVarReturnType = new TypeToken<TicketAddCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCommentAsync(String ticketId, TicketAddCommentRequest ticketAddCommentRequest, final ApiCallback<TicketAddCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCommentValidateBeforeCall(ticketId, ticketAddCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<TicketAddCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCommentRequestBuilder {
        private final String ticketId;
        private String message;

        private AddCommentRequestBuilder(String ticketId) {
            this.ticketId = ticketId;
        }

        /**
         * Set message
         * @param message Message to post (optional)
         * @return AddCommentRequestBuilder
         */
        public AddCommentRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Build call for addComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TicketAddCommentRequest ticketAddCommentRequest = buildBodyParams();
            return addCommentCall(ticketId, ticketAddCommentRequest, _callback);
        }

        private TicketAddCommentRequest buildBodyParams() {
            TicketAddCommentRequest ticketAddCommentRequest = new TicketAddCommentRequest();
            ticketAddCommentRequest.message(this.message);
            return ticketAddCommentRequest;
        }

        /**
         * Execute addComment request
         * @return TicketAddCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TicketAddCommentResponse execute() throws ApiException {
            TicketAddCommentRequest ticketAddCommentRequest = buildBodyParams();
            ApiResponse<TicketAddCommentResponse> localVarResp = addCommentWithHttpInfo(ticketId, ticketAddCommentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addComment request with HTTP info returned
         * @return ApiResponse&lt;TicketAddCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TicketAddCommentResponse> executeWithHttpInfo() throws ApiException {
            TicketAddCommentRequest ticketAddCommentRequest = buildBodyParams();
            return addCommentWithHttpInfo(ticketId, ticketAddCommentRequest);
        }

        /**
         * Execute addComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TicketAddCommentResponse> _callback) throws ApiException {
            TicketAddCommentRequest ticketAddCommentRequest = buildBodyParams();
            return addCommentAsync(ticketId, ticketAddCommentRequest, _callback);
        }
    }

    /**
     * Add Comment
     * 
     * @param ticketId Unique ticket ID (required)
     * @return AddCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddCommentRequestBuilder addComment(String ticketId) throws IllegalArgumentException {
        if (ticketId == null) throw new IllegalArgumentException("\"ticketId\" is required but got null");
            

        return new AddCommentRequestBuilder(ticketId);
    }
    private okhttp3.Call closeCall(String ticketId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/tickets/{ticket_id}/resolved"
            .replace("{" + "ticket_id" + "}", localVarApiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeValidateBeforeCall(String ticketId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling close(Async)");
        }

        return closeCall(ticketId, _callback);

    }


    private ApiResponse<TicketCloseResponse> closeWithHttpInfo(String ticketId) throws ApiException {
        okhttp3.Call localVarCall = closeValidateBeforeCall(ticketId, null);
        Type localVarReturnType = new TypeToken<TicketCloseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call closeAsync(String ticketId, final ApiCallback<TicketCloseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeValidateBeforeCall(ticketId, _callback);
        Type localVarReturnType = new TypeToken<TicketCloseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CloseRequestBuilder {
        private final String ticketId;

        private CloseRequestBuilder(String ticketId) {
            this.ticketId = ticketId;
        }

        /**
         * Build call for close
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return closeCall(ticketId, _callback);
        }


        /**
         * Execute close request
         * @return TicketCloseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TicketCloseResponse execute() throws ApiException {
            ApiResponse<TicketCloseResponse> localVarResp = closeWithHttpInfo(ticketId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute close request with HTTP info returned
         * @return ApiResponse&lt;TicketCloseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TicketCloseResponse> executeWithHttpInfo() throws ApiException {
            return closeWithHttpInfo(ticketId);
        }

        /**
         * Execute close request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TicketCloseResponse> _callback) throws ApiException {
            return closeAsync(ticketId, _callback);
        }
    }

    /**
     * Close Ticket
     * 
     * @param ticketId Unique ticket ID (required)
     * @return CloseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CloseRequestBuilder close(String ticketId) throws IllegalArgumentException {
        if (ticketId == null) throw new IllegalArgumentException("\"ticketId\" is required but got null");
            

        return new CloseRequestBuilder(ticketId);
    }
    private okhttp3.Call getByIdCall(String ticketId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/tickets/{ticket_id} (COPY)"
            .replace("{" + "ticket_id" + "}", localVarApiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String ticketId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling getById(Async)");
        }

        return getByIdCall(ticketId, _callback);

    }


    private ApiResponse<TicketGetByIdResponse> getByIdWithHttpInfo(String ticketId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(ticketId, null);
        Type localVarReturnType = new TypeToken<TicketGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String ticketId, final ApiCallback<TicketGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(ticketId, _callback);
        Type localVarReturnType = new TypeToken<TicketGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String ticketId;

        private GetByIdRequestBuilder(String ticketId) {
            this.ticketId = ticketId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(ticketId, _callback);
        }


        /**
         * Execute getById request
         * @return TicketGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TicketGetByIdResponse execute() throws ApiException {
            ApiResponse<TicketGetByIdResponse> localVarResp = getByIdWithHttpInfo(ticketId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;TicketGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TicketGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(ticketId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TicketGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(ticketId, _callback);
        }
    }

    /**
     * Get Ticket
     * 
     * @param ticketId Unique ticket ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String ticketId) throws IllegalArgumentException {
        if (ticketId == null) throw new IllegalArgumentException("\"ticketId\" is required but got null");
            

        return new GetByIdRequestBuilder(ticketId);
    }
    private okhttp3.Call listCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v1/partner/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCall(_callback);

    }


    private ApiResponse<List<TicketListResponseInner>> listWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TicketListResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(final ApiCallback<List<TicketListResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TicketListResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {

        private ListRequestBuilder() {
        }

        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(_callback);
        }


        /**
         * Execute list request
         * @return List&lt;TicketListResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<TicketListResponseInner> execute() throws ApiException {
            ApiResponse<List<TicketListResponseInner>> localVarResp = listWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TicketListResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TicketListResponseInner>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo();
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TicketListResponseInner>> _callback) throws ApiException {
            return listAsync(_callback);
        }
    }

    /**
     * List Tickets
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateTicketByIdCall(String ticketId, TicketUpdateTicketByIdRequest ticketUpdateTicketByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ticketUpdateTicketByIdRequest;

        // create path and map variables
        String localVarPath = "/core/v1/partner/tickets/{ticket_id}"
            .replace("{" + "ticket_id" + "}", localVarApiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTicketByIdValidateBeforeCall(String ticketId, TicketUpdateTicketByIdRequest ticketUpdateTicketByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling updateTicketById(Async)");
        }

        return updateTicketByIdCall(ticketId, ticketUpdateTicketByIdRequest, _callback);

    }


    private ApiResponse<TicketUpdateTicketByIdResponse> updateTicketByIdWithHttpInfo(String ticketId, TicketUpdateTicketByIdRequest ticketUpdateTicketByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTicketByIdValidateBeforeCall(ticketId, ticketUpdateTicketByIdRequest, null);
        Type localVarReturnType = new TypeToken<TicketUpdateTicketByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTicketByIdAsync(String ticketId, TicketUpdateTicketByIdRequest ticketUpdateTicketByIdRequest, final ApiCallback<TicketUpdateTicketByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTicketByIdValidateBeforeCall(ticketId, ticketUpdateTicketByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<TicketUpdateTicketByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTicketByIdRequestBuilder {
        private final String ticketId;
        private String title;
        private String description;

        private UpdateTicketByIdRequestBuilder(String ticketId) {
            this.ticketId = ticketId;
        }

        /**
         * Set title
         * @param title New ticket title (optional)
         * @return UpdateTicketByIdRequestBuilder
         */
        public UpdateTicketByIdRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description New ticket description (optional)
         * @return UpdateTicketByIdRequestBuilder
         */
        public UpdateTicketByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for updateTicketById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TicketUpdateTicketByIdRequest ticketUpdateTicketByIdRequest = buildBodyParams();
            return updateTicketByIdCall(ticketId, ticketUpdateTicketByIdRequest, _callback);
        }

        private TicketUpdateTicketByIdRequest buildBodyParams() {
            TicketUpdateTicketByIdRequest ticketUpdateTicketByIdRequest = new TicketUpdateTicketByIdRequest();
            ticketUpdateTicketByIdRequest.title(this.title);
            ticketUpdateTicketByIdRequest.description(this.description);
            return ticketUpdateTicketByIdRequest;
        }

        /**
         * Execute updateTicketById request
         * @return TicketUpdateTicketByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TicketUpdateTicketByIdResponse execute() throws ApiException {
            TicketUpdateTicketByIdRequest ticketUpdateTicketByIdRequest = buildBodyParams();
            ApiResponse<TicketUpdateTicketByIdResponse> localVarResp = updateTicketByIdWithHttpInfo(ticketId, ticketUpdateTicketByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTicketById request with HTTP info returned
         * @return ApiResponse&lt;TicketUpdateTicketByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TicketUpdateTicketByIdResponse> executeWithHttpInfo() throws ApiException {
            TicketUpdateTicketByIdRequest ticketUpdateTicketByIdRequest = buildBodyParams();
            return updateTicketByIdWithHttpInfo(ticketId, ticketUpdateTicketByIdRequest);
        }

        /**
         * Execute updateTicketById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TicketUpdateTicketByIdResponse> _callback) throws ApiException {
            TicketUpdateTicketByIdRequest ticketUpdateTicketByIdRequest = buildBodyParams();
            return updateTicketByIdAsync(ticketId, ticketUpdateTicketByIdRequest, _callback);
        }
    }

    /**
     * Update Ticket
     * 
     * @param ticketId Unique ticket ID (required)
     * @return UpdateTicketByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTicketByIdRequestBuilder updateTicketById(String ticketId) throws IllegalArgumentException {
        if (ticketId == null) throw new IllegalArgumentException("\"ticketId\" is required but got null");
            

        return new UpdateTicketByIdRequestBuilder(ticketId);
    }
}
